<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2021/10/17/ji-suan-ji-wang-luo-di-yi-zhang-gai-shu/"/>
      <url>/2021/10/17/ji-suan-ji-wang-luo-di-yi-zhang-gai-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机网络第一章（概述）"><a href="#计算机网络第一章（概述）" class="headerlink" title="计算机网络第一章（概述）"></a>计算机网络第一章（概述）</h2><p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016103344.png"  height=%5 />代表主机</p><p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016103558.png"  height=5% />代表服务器</p><p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016103603.png"  height=%5 />代表着路由器</p><p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016103608.png" height="5%" />代表着网络</p><h3 id="1-1-计算机网络在信息时代的作用"><a href="#1-1-计算机网络在信息时代的作用" class="headerlink" title="1.1 计算机网络在信息时代的作用"></a>1.1 计算机网络在信息时代的作用</h3><ol><li>计算机网络已由一种<strong>通信基础设施</strong>发展成为一种重要的信息服务基础设施</li><li>计算机网络已经像水，电，煤气这些基础设施一样，成为我们<strong>生活中不可或缺</strong>的一部分</li></ol><h3 id="1-2-因特网概述"><a href="#1-2-因特网概述" class="headerlink" title="1.2 因特网概述"></a>1.2 因特网概述</h3><h4 id="1-网络，互连网（互联网）和因特网"><a href="#1-网络，互连网（互联网）和因特网" class="headerlink" title="1. 网络，互连网（互联网）和因特网"></a>1. 网络，互连网（互联网）和因特网</h4><p><strong>网络</strong>：网络（Network）由若干<strong>结点（Node）和链接这些节点的链路（Link）</strong>组成。</p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016103711.png" width=256 height=256 /><p><strong>互联网</strong>：多个网络通过路由器连起来，这样就构成了一个覆盖范围更大的网络，即互连网（互联网）。因此，互连网又称为“网络的网络（Network of Network）”</p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016103716.png" height=256 /><p><strong>因特网</strong>：因特网（Internet）是世界上最大的互连网络（用户数以亿计，互连的网络数以百万计）。</p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016103720.png" height=256 /><blockquote><p><strong>internet与Internet的区别</strong></p><ul><li><strong>internet(互连网或互连网)是一个通用名词，它泛指多个计算机网络互连而成的网络</strong>。在这些网络之间的通信协议可以是任意的。</li><li><strong>Internet(因特网)则是一个专用名词</strong>，它指<strong>当前全球最大的，开放的，由众多网络互连而成的特定计算机网络，</strong>它采用TCP/IP协议族作为通信的规则，其前身是美国的APPANET。</li></ul></blockquote><p><strong>任意把几个计算机网络互连起来（不管采用什么协议），并能够互相通信，这样构成的是一个互连网（internet），而不是Internet</strong></p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016103731.png" widht=256 height=256 /><h4 id="2-因特网发展的三个阶段"><a href="#2-因特网发展的三个阶段" class="headerlink" title="2. 因特网发展的三个阶段"></a>2. 因特网发展的三个阶段</h4><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016103739.png" height=256 /><p><strong>因特网服务提供者 ISP</strong>（<strong>I</strong>nternet <strong>S</strong>ervice <strong>P</strong>rovider）</p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016103744.png"  height=256 /><blockquote><p>普通用户如何接入到因特网的呢？</p><p>答：<strong>通过ISP接入因特网</strong></p><p>ISP可以从因特网管理机构申请到成块的IP地址，同时拥有通信线路以及路由器等互联网设备。任何机构和个人只需要缴纳费用，就可以<strong>从ISP的得到所需要的IP地址</strong></p><p><strong>因为因特网上的主机都必须有IP地址才能进行通信，这样就可以通过该ISP接入到因特网</strong></p></blockquote><p><strong>中国三大ISP：</strong>中国电信，中国联通，中国移动</p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016103801.png"  height=256 /><p>基于ISP的三层结构的因特网</p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016103810.png"  height=256 /><blockquote><p>一旦某个用户能够接入到因特网，那么它也可以成为一个ISP，所需要做的就是购买一些如调制解调器或路由器这样的设备，让其他用户可以和他相连</p></blockquote><h4 id="3-因特网的标准化工作"><a href="#3-因特网的标准化工作" class="headerlink" title="3. 因特网的标准化工作"></a>3. 因特网的标准化工作</h4><ul><li>因特网的标准化工作对因特网的发展起到了非常重要的作用。</li><li>因特网在指定其标准上有一个很大的特点是<strong>面向公众</strong></li></ul><blockquote><p>因特网所有的<strong>RFC</strong>（Request For Comments）技术文档都可以从因特网上免费下载</p><p>任何人都可以随时用电子邮件发表对某个文档的意见或建议</p></blockquote><ul><li><p>制订因特网的正式标准要经过一下<strong>4个阶段</strong></p><ol><li>因特网草案（这个阶段还不是RFC文档）</li><li>建议标准（从这个阶段开始就称为RFC文档）</li><li>草案标准</li><li>因特网标准</li></ol><h4 id="4-因特网的组成"><a href="#4-因特网的组成" class="headerlink" title="4. 因特网的组成"></a>4. 因特网的组成</h4><ul><li><p>边缘部分</p><p>由所有链接在因特网上的<strong>主机</strong>组成（台式电脑，大型服务器，笔记本电脑，平台，智能手机等）。这部分是<strong>用户直接使用的</strong>，用来进行<strong>通信</strong>（传送数据，音频或视频）和<strong>资源共享</strong>。</p></li><li><p>核心部分</p><p>由<strong>大量网络</strong>和链接这些网络的<strong>路由器</strong>组成。这部分<strong>为边缘部分提供服务</strong>的（提供连通性和交换）</p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016103822.png"  height=256 /></li></ul></li></ul><blockquote><p>路由器是一种专用计算机，但我们不称它为主机，路由器是实现分组交换的关键构建，其任务是转发收到分组，这是网络核心最重要的部分。</p><p>处在互联网边缘的部分就是连接在互联网的所有主机。这些主机又称为<strong>端系统</strong>（ebd system）</p><p><strong>端系统在功能上可能有很大差别</strong>：</p><ol><li>小的端系统可以是一台普通的个人电脑，具有上网功能的智能手机，甚至是一个很小的网络摄像头。</li><li>大的端系统则可以是一台非常昂贵的大型计算机。</li><li>端系统的拥有者可以是个人，也可以是单位（学校，企业，政府机关等）,当然也可以是某个ISP</li></ol></blockquote><p><strong>补充</strong>：</p><p><strong>端系统之间通信的含义</strong></p><p>”主机A和主机B进行通信“实际上是指：”运行在主机A上的某个程序和运行在主机B上的另一个程序进行通信“<strong>即</strong>：<strong>主机A的某个进程和主机B的另一个进程进行通信，简称为计算机之间的通信</strong></p><p>端系统之间的通信方式通常可以划分为两类：</p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016103829.png"  height=256 /><p><strong>客户-服务器方式</strong></p><blockquote><ul><li>客户（cilent）和服务器（server）都是指通信中所设计的两个应用进程。</li><li>客户-服务器方式所描述的是进程之间服务和被服务的关系。</li><li>客户是服务的请求方，服务器是服务的提供方</li><li>服务请求方和服务提供方都要使用网络和新部分所提供的服务</li></ul></blockquote><p><strong>对等连接方式</strong>：</p><ul><li><strong>对等连接（peer-to-peer，</strong>简写P2P**）是指两个主机在通信时并不区分哪一个是请求方还是提供方</li><li>只要两个主机都运行了对等连接软件（P2P软件），他们就可以进行<strong>平等的，对等连接通信</strong></li><li>双方都可以下载对方已经存储在硬盘中的共享文档</li></ul><h3 id="1-3-三种交换方式"><a href="#1-3-三种交换方式" class="headerlink" title="1.3 三种交换方式"></a>1.3 三种交换方式</h3><p>网络核心部分是互联网中最复杂的部分。</p><p>网络中的核心部分要向网络边缘中的大量主机提供连通性，使边缘部分的任何一个主机都能够向其他主机通信（即传送或接受各种形式的数据）</p><p>在网络核心部分起特殊作用的是<strong>路由器</strong>（router）</p><p><strong>路由器</strong>是实现<strong>分组交换(packet switching)<strong>的关键构件，其任务是</strong>转发</strong>收到的分组，这是网络核心部分最重要的功能。</p><h4 id="1-电路交换（Circuit-Switching）"><a href="#1-电路交换（Circuit-Switching）" class="headerlink" title="1. 电路交换（Circuit Switching）"></a>1. 电路交换（Circuit Switching）</h4><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016103836.png"  height=256 /><blockquote><p>传统两两相连的方式，当电话数量很多时，电话线也很多，很不方便。所以要使得每一步电话能够很方便地和另一部电话进行通信，就应该使用<strong>中间设备</strong>将这些电话连接起来，这个中间设备就是<strong>电话交换机</strong></p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016103840.png"  height=256 /></blockquote><ul><li>电话交换机接通电话线的方式称为电路交换</li><li>从通讯资源的分配角度来看，交换（Switching）就是按照某种方式动态的分配传输线路的资源</li><li>电路交换的三个步骤</li></ul><ol><li>建立连接（分配通信资源）</li><li>通话（一直占用通信资源）</li><li>释放连接（归还通信资源）</li></ol><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016103845.png"  height=256 /><blockquote><p>当使用电路交换来传送计算机数据时，其线路的传输效率很低。这是因为计算机数据时突发式地出现在传输线路上的，所以计算机通常采用分组交换，而不是线路交换</p></blockquote><h4 id="2-分组交换（Paket-Switching）"><a href="#2-分组交换（Paket-Switching）" class="headerlink" title="2. 分组交换（Paket Switching）"></a>2. 分组交换（Paket Switching）</h4><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016103852.png"  height=256 /><blockquote><p>通常我们把表示<strong>该消息的整块数据</strong>称为一个<strong>报文</strong>。</p><p>在发送报文之前，先把较长的报文划分成一个个个更小的<strong>等长数据段</strong>，在每一个数据段前面。加上一些由<strong>必要的控制信息组成的首部</strong>后，就构成了一个分组，也可以简称为”包“，相应的，首部也可以成为”包头“。</p><p>首部包含了<strong>分组的目的地址</strong></p><p>分组从源主机到目的主机，可走不同的路径</p></blockquote><p>发送方</p><ul><li>构造分组</li><li>发送分组</li></ul><p>路由器</p><ul><li>缓存分组</li><li>转发分组</li></ul><p>简称为分组转发</p><blockquote><p>在路由器中的输入和输出端口之间没有直接连线</p><p>路由器处理分组的过程是：</p><ol><li>把收到的分组先<strong>放入缓存（暂时缓存）</strong></li><li><strong>查找转发表</strong>，找出到某个目的地址应从那个端口转发；</li><li>把分组送到适当的端口转发出去。</li></ol></blockquote><p>接收方</p><ul><li>接收分组</li><li>还原报文</li></ul><h4 id="3-报文交换（Message-Switching）"><a href="#3-报文交换（Message-Switching）" class="headerlink" title="3.报文交换（Message Switching）"></a>3.报文交换（Message Switching）</h4><p>报文交换中的交换节点也采用存储转发方式，但报文交换对报文的大小没有限制，这就要求节点需要较大的缓存空间。报文交换主要用于早期的电报通信网，现在较少使用，<strong>通常被较先进的分组交换方式所取代</strong></p><h4 id="三种交换方式的对比"><a href="#三种交换方式的对比" class="headerlink" title="三种交换方式的对比"></a>三种交换方式的对比</h4><blockquote><p>假设A,B,C,D是分组传输路径索要经过的4个结点交换机，纵坐标为时间</p></blockquote><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016103900.png"  height=256 /><p>分析：</p><p>电路交换：</p><ul><li>通信之前首先要简历连接；连接建立好之后，就可以使用已经建立好的连接进行数据传送；数据传送后，需释放连接，以归还之前建立连接所占用的通信线路资源。</li><li>一旦建立连接，中间的各结点交换机就是直通形式的，比特流可以直达终点。</li></ul><p>报文交换：</p><ul><li>可以随时发送报文，而不需要实现建立连接，整个报文先传送到相邻结点交换机，全部存储下来后进行查表转发，转发到下一个结点交换机。</li><li>整个报文需要在各结点交换机上进行存储转发，由于不限制报文大小，因此需要各结点交换机都具有较大的缓存空间。</li></ul><p>分组交换：</p><ul><li>可以随时发送分组，而不需要事先建立连接。构成原始报文的一个个分组，依次在各结点交换机上存储转发。各结点交换机在发送分组的同时，还缓存接收到的分组。</li><li>构成原始报文的一个个分组，在各结点交换机上存储转发，相比报文交换，减少了转发时延，可以避免长的报文长时间占用链路，同时也有利于错差控制</li></ul><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016103949.png"  height=256 /><h3 id="1-4-计算机网络的定义和分类"><a href="#1-4-计算机网络的定义和分类" class="headerlink" title="1.4 计算机网络的定义和分类"></a>1.4 计算机网络的定义和分类</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><ul><li><p>计算机网路的精确定义并未统一</p></li><li><p>计算机网络的最简单定义：一些<strong>互</strong>相<strong>连</strong>接的，<strong>自治</strong>的计算机<strong>集合</strong></p></li></ul><p>​     互连：是指计算机之间可以通过有线或无线的方式进行数据通信</p><p>​     自治：是指独立的计算机，他们有自己的硬件和软件，可以单独运行使用</p><p>​     集合：是指至少需要两台计算机。</p><ul><li>计算机网络的较好定义是：计算机网络主要是由一些<strong>通用的，可编程的硬件（一定是包含中央处理机CPU）互连</strong>而成的，而这些硬件并非专门用来实现某一特定目的（例如，传送数据或视频信号）。这些可编程的硬件能够用来<strong>传送多种不同类型的数据</strong>，并能<strong>支持广泛的和日益增长的应用。</strong></li></ul><p>计算机网络所连接的硬件，并不限于一般的计算机，二十包括了智能手机等智能硬件。</p><p>计算机网络并非专门用来传送数据，二十能够支持很多种的应用（包括今后可能出现的各种应用）。</p><h4 id="2-分类"><a href="#2-分类" class="headerlink" title="2. 分类"></a>2. 分类</h4><p><strong>按交换技术分类：</strong></p><ul><li>电路交换网络</li><li>报文交换网络</li><li>分组交换网络</li></ul><p><strong>按使用者分类</strong></p><ul><li>公用网</li><li>专用网</li></ul><p><strong>按传输介质分类：</strong></p><ul><li>有线网络</li><li>无线网络</li></ul><p><strong>按覆盖范围分类：</strong></p><ul><li><p>广域网WAN（Wide Area Network）</p><p>作用范围通常为几十到几千公里，因为有时也称为远程网（long haul network）。广域网是互联网的核心部分，其任务就是通过长距离（例如，跨越不同的国家）运送主机所发送的数据</p></li><li><p>城域网MAN</p><p>作用范围一般是一个城市，可跨越几个街区甚至整个城市</p></li><li><p>局域网LAN</p><p>一般用微型计算机或工作站通过告诉通信电路项链（通常速率在10Mbit/s以上），但地理范围比较小（1km左右）</p></li><li><p>个域网PAN</p><p>就是在个人工作的地方把个人使用的电子设备用无线技术连接起来的网络</p><p><strong>按拓扑结构分类</strong></p><ul><li><p>总线型网络</p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016103958.png"  height=256 /></li><li><p>星型网络</p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104005.png"  height=256 /></li><li><p>环形网络</p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104009.png"  height=256 /></li><li><p>​    网状型网络</p></li></ul><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104015.png"  height=256 /></li></ul><h3 id="1-5-计算机网络的性能指标"><a href="#1-5-计算机网络的性能指标" class="headerlink" title="1.5 计算机网络的性能指标"></a>1.5 计算机网络的性能指标</h3><p><strong>速率：</strong></p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104021.png"  height=256 /><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104026.png"  height=256 /><p><strong>带宽</strong>：</p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104031.png"  height=256 /><p><strong>吞吐量</strong></p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104038.png"  height=256 /><blockquote><p>宽带1Gb/s的以太网，代表其额度速率是1Gb/s，这个数值也是该以太网的<strong>吞吐量的绝对上限值</strong>。因此，对于宽带1Gb/s的以太网，可能实际吞吐量只有700Mb/s，甚至更低。</p><p>注意：吞吐量还可以用每秒传送的字节数或帧数表示</p></blockquote><p><strong>时延</strong></p><p>时延时指数据（一个报文或分组，甚至比特）从网络（或链路）的一端传送到另一端所需的时间。</p><p>网络时延由及部分组成：</p><ul><li><p>发送时延</p><p>主机或路由器发送数据帧所需要的时间，也就是发送数据真的第一个比特算起，到该帧的最后一个比特发送完毕所需要的时间。</p></li><li><p>传播时延</p><p>电磁波在信道中传播一定的距离需要花费的时间</p></li><li><p>处理时延</p><p>主机或路由器在收到分组时要花费一定时间处理</p></li><li><p>排队时延</p><p>分组在进行网络传输时，要经过许多路由器，但是分组在进入路由器后要先输入队列中排队等待处理</p></li></ul><blockquote><p>有时会把排队时延堪称<strong>处理时延的一部分</strong></p><p>总时延=发送时延+传播时延+处理时延（处理时延+排队时延）</p></blockquote><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104045.png"  height=256 /><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104050.png"  height=256 /><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104050.png"  height=256 /><blockquote><p>当处理时延忽略不计时，发送时延和传播时延谁占主导，要具体情况具体分析</p></blockquote><p><strong>时延带宽积</strong></p><p>时延带宽积= 传播时延*带宽</p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104057.png"  height=256 /><p><strong>往返时间</strong></p><p>互联网上的信息不仅仅单方向传输而是双向交互的。因此，我们有时很需要知道<strong>双向交互一次所需的时间</strong></p><p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104104.png"  height=256 />。</p><p><strong>利用率</strong></p><p>利用率由<strong>信道利用率</strong>和<strong>网络利用率</strong>两种</p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104110.png"  height=256 /><p><strong>丢包率</strong></p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104116.png"  height=256 /><h3 id="1-6-计算机网络体系结构"><a href="#1-6-计算机网络体系结构" class="headerlink" title="1.6 计算机网络体系结构"></a>1.6 计算机网络体系结构</h3><h4 id="1-常见的计算机网络体系结构"><a href="#1-常见的计算机网络体系结构" class="headerlink" title="1. 常见的计算机网络体系结构"></a>1. 常见的计算机网络体系结构</h4><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104122.png"  height=256 /><blockquote><p>如今用的最多的是TCP/IP体系结构，现金规模最大的，覆盖全球的，基于TCP/IP的互联网并未使用OSI标准。TCP/IP体系结构相当于将OSI体系结构的<strong>物理层</strong>和<strong>数据链路层</strong>合并为了<strong>网络接口层</strong>，并去掉了<strong>会话层</strong>和<strong>表示层</strong></p><p>TCP/IP在网络层使用的协议是IP协议，IP协议的意思是网际协议，因此<strong>TCP/IP体系结构的网络层称为网际层</strong></p></blockquote><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104127.png"  height=256 /><blockquote><p>在用户主机的操作系统中，通常都带有符合TCP/IP体系结构标准的TCP/IP协议族</p><p>而用于网络互连的路由器中，也带有符合TCP/IP体系结构标准的TCP/IP协议族</p><p>只不过路由器一般只包含网络接口层和网际层</p></blockquote><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104135.png"  height=256 /><blockquote><p><strong>网络接口层</strong>：并没有规定具体内容，这样做的目的是可以互连全世界各种不同的网络接口，例如：有线的以太网接口，无线局域网的WIFI接口等。</p><p><strong>网际层</strong>：它的核心协议是IP协议。</p><p><strong>运输层</strong>：TCP和UDP是这层的两个重要协议。</p><p><strong>应用层</strong>：这层包含了大量的应用层协议，如HTTP，DNS等。</p></blockquote><blockquote><p>IP协议（网际层）<strong>可以将不同的</strong>网络接口（网络接口层）<strong>进行互连</strong>，<strong>并向其上的</strong>TCP协议和UDP协议（运输层）**提供网络互连服务</p><p>而<strong>TCP协议</strong>在享受IP协议提供的网络互连服务的基础上，可向<strong>应用层的相应协议</strong>提供<strong>可靠</strong>的传输服务。</p><p><strong>UDP协议</strong>在享受IP协议提供的网络互联服务的基础上，可想<strong>应用层的相应协议</strong>提供<strong>不可靠</strong>的传输服务</p></blockquote><blockquote><p>TCP/IP体系结构中最重要的是<strong>IP协议</strong>和<strong>TCP协议</strong>，因此用TCP和IP来表示整个协议大家族</p></blockquote><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104142.png"  height=256 /><blockquote><p>教学时把TCP/IP体系结构的<strong>网络接口层</strong>分成了<strong>物理层</strong>金额<strong>数据链路层</strong></p></blockquote><h4 id="2-计算机网络体系结构分层的必要性"><a href="#2-计算机网络体系结构分层的必要性" class="headerlink" title="2. 计算机网络体系结构分层的必要性"></a>2. 计算机网络体系结构分层的必要性</h4><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104151.png"   height=150/><p><strong>物理层问题</strong></p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104156.png"  height=256 /><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104156.png"  height=256 /><blockquote><p>这图说明：</p><ul><li>第一，严格来说，传世媒体并不属于物理层</li><li>计算机传输的信号，并不是图示的方波信号</li></ul><p>这样距离只是让初学者容易理解</p></blockquote><p><strong>数据链路层问题</strong></p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104204.png"  height=256 /><p><strong>网络层问题</strong></p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104211.png"  height=256 /><p><strong>运输层问题</strong></p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104216.png"  height=256 /><blockquote><p>如何表示与网络通信相关的应用进程：一个分组到来，我们应该交给哪个进程处理？浏览器进程还是QQ进程</p></blockquote><p><strong>应用层问题</strong></p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104224.png"  height=256 /><blockquote><p>应用层用什么方法（应用层协议）去解析数据</p></blockquote><p><strong>总结</strong></p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104231.png"  height=256 /><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104241.png"  height=256 /><h4 id="3-计算机网络体系结构分层思想举例"><a href="#3-计算机网络体系结构分层思想举例" class="headerlink" title="3. 计算机网络体系结构分层思想举例"></a>3. 计算机网络体系结构分层思想举例</h4><p><strong>例子</strong>：主机的浏览器如何与Web服务器进行通信</p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104246.png"  height=256 /><p><strong>解析</strong></p><p>主机和web服务器之间基于网络的通信，实际上是主机中的<strong>浏览器应用进程</strong>与web服务器中的<strong>web服务器应用进程</strong>之间基于<strong>网络的通信</strong></p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104254.png"  height=256 /><p><strong>体系结构的各层在整个过程中起到怎样的作用？</strong></p><p><strong>1. 发送方发送</strong></p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104300.png"  height=150 /><blockquote><p>第一步：</p><ul><li><strong>应用层</strong>按照HTTP协议的规定构建一个<strong>HTTP请求报文</strong></li><li>应用层将<strong>HTTP请求报文</strong>交付给<strong>运输层</strong>处理</li></ul></blockquote><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104304.png"  height=256 /><blockquote><p>第二步：</p><ul><li><strong>运输层</strong>给<strong>HTTP请求报文</strong>添加一个<strong>TCP首部</strong>，使之成为<strong>TCP报文段</strong></li><li><strong>TCP报文段的首部格式</strong>作用是区分应用进程以及实现可靠传输</li><li><strong>运输层</strong>将<strong>TCP报文段</strong>交付给<strong>网络层</strong>处理</li></ul></blockquote><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104309.png"  height=256 /><blockquote><p>第三步：</p><ul><li><strong>网络层</strong>给<strong>TCP报文段</strong>添加一个<strong>IP首部</strong>，使之成为<strong>IP数据报</strong></li><li><strong>IP数据报的首部格式</strong>作用是使<strong>IP数据报</strong>可以在互联网传输，也就是被路由器转发</li><li><strong>网络层</strong>将<strong>IP数据报</strong>交付给<strong>数据链路层</strong>处理</li></ul></blockquote><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104314.png"  height=256 /><blockquote><p>第四步：</p><ul><li><p><strong>数据链路层</strong>给<strong>IP数据报</strong>添加一个<strong>首部</strong>和一个<strong>尾部</strong>，使之成为<strong>帧</strong>（图右边为首部，左边为尾部）</p></li><li><p>该<strong>首部</strong>的作用主要是为了让<strong>帧</strong>能够在一段链路上或一个网络上传输，能够被相应的目的主机接收</p></li><li><p>该<strong>尾部</strong>的作用是让目的主机检查所接受到<strong>帧</strong>是否有误码</p></li><li><p><strong>数据链路层</strong>将<strong>帧</strong>交付给<strong>物理层</strong></p></li></ul></blockquote><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104319.png"  height=256 /><blockquote><p>第五步：</p><ul><li><strong>物理层</strong>先将<strong>帧</strong>看作是<strong>比特流</strong>，这里的网络N1假设是以太网，所以<strong>物理层</strong>还会给该<strong>比特流</strong>前添加<strong>前导码</strong></li><li><strong>前导码</strong>的作用是为了让目的主机做好接收帧的准备</li><li><strong>物理层</strong>将装有<strong>前导码</strong>的<strong>比特流</strong>比那换成相应的<strong>信号</strong>发送给传输媒体</li></ul></blockquote><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104325.png"  height=256 /><blockquote><p>第六步：</p><ul><li><strong>信号</strong>通过<strong>传输媒体</strong>到达<strong>路由器</strong></li></ul></blockquote><ol start="2"><li><strong>路由器转发</strong></li></ol><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104331.png"  height=256 /><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104337.png"  height=256 /><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104346.png"  height=256 /><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104350.png"  height=256 /><blockquote><p>在路由器中</p><ul><li><strong>物理层</strong>将<strong>信号</strong>变为<strong>比特流</strong>，然后去掉<strong>前导码</strong>后，将其交付给<strong>数据链路层</strong></li><li><strong>数据链路层</strong>将<strong>帧</strong>的<strong>首部</strong>和<strong>尾部</strong>去掉后，将其交付给<strong>网络层</strong>，这实际交付的是<strong>IP数据报</strong></li><li><strong>网络层</strong>解析<strong>IP数据报</strong>的<strong>首部</strong>，从中提取<strong>目的网络地址</strong></li></ul></blockquote><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104356.png"  height=256 /><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104400.png"  height=256 /><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104404.png"  height=256 /><blockquote><p>在路由器中</p><ul><li>提取<strong>目的网络地址</strong>后查找<strong>自身路由表</strong>。确定<strong>转发端口</strong>，以便进行转发</li><li><strong>网络层</strong>将<strong>IP数据报</strong>交付给<strong>数据链路层</strong></li><li><strong>数据链路层</strong>给<strong>IP数据报</strong>添加一个<strong>首部</strong>和一个<strong>尾部</strong>，使其成为<strong>帧</strong></li><li><strong>数据链路层</strong>先将<strong>帧</strong>堪称<strong>比特流</strong>，这里的网络N2假设是以太网，所以<strong>物理层</strong>还会给该<strong>比特流</strong>前面添加<strong>前导码</strong></li><li>物理层将装有<strong>前导码</strong>的<strong>比特流</strong>变换成相应的<strong>信号</strong>发送给传输媒体，信号通过传输媒体到达<strong>web服务器</strong></li></ul></blockquote><p><strong>3 接收方接受</strong></p><blockquote><p>和发送方（主机）发送过程的封装正好是反着来</p><p>在web服务器上</p><ul><li><strong>物理层</strong>将<strong>信号</strong>变换成<strong>比特流</strong>，然后去掉<strong>前导码</strong>成为<strong>帧</strong>，交付给<strong>数据链路层</strong></li><li><strong>数据链路层</strong>将<strong>帧</strong>的<strong>首部</strong>和<strong>尾部</strong>去掉后成为<strong>IP数据报</strong>，将其交付给<strong>网络层</strong></li><li><strong>网络层</strong>将<strong>IP数据报</strong>的<strong>首部</strong>去掉后成为<strong>TCP报文段</strong>，将其交付给<strong>运输层</strong></li><li><strong>运输层</strong>将<strong>TCP报文段</strong>的<strong>首段</strong>去掉后成为<strong>HTTP</strong>请求报文，将其交付给<strong>应用层</strong></li><li><strong>应用层</strong>对<strong>HTTP</strong>请求报文进行解析，然后给主机发挥<strong>回应报文</strong></li></ul><p>发回响应报文的步骤和之前过程类似</p></blockquote><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104410.png"  height=256 /><h4 id="4-计算机网络体系结构中的专业术语"><a href="#4-计算机网络体系结构中的专业术语" class="headerlink" title="4.计算机网络体系结构中的专业术语"></a>4.计算机网络体系结构中的专业术语</h4><p><strong>实体</strong></p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104417.png"  height=256 /><p><strong>协议</strong></p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104423.png"  height=256 /><blockquote><p>协议：控制两个对等实体进行逻辑通信的规则集合</p><p>协议三要素：</p><ul><li>语法：定义所交换信息的格式</li><li>语义：定义手法双方索要完成的操作</li><li>同步：定义手法双方的时序关系</li></ul></blockquote><p><strong>服务</strong></p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104434.png"  height=256 /><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104757.png"  height=256 /><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104757.png"  height=256 /><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016104806.png"  height=256 />]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/10/17/5-wen-ben-wen-jian/"/>
      <url>/2021/10/17/5-wen-ben-wen-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="5-1-文本文件"><a href="#5-1-文本文件" class="headerlink" title="5.1 文本文件"></a>5.1 文本文件</h2><h3 id="5-1-1写文件"><a href="#5-1-1写文件" class="headerlink" title="5.1.1写文件"></a>5.1.1写文件</h3><p>写文件步骤如下：</p><ol><li><p>包含头文件</p><p>#include <fstream></p></li><li><p>创建流对象</p><p>ofstream ofs;</p></li><li><p>打开文件</p><p>ofs.open(“文件路径”，打开方式)；</p></li><li><p>写数据</p><p>ofs&lt;&lt;”写入的数据”；</p></li><li><p>关闭文件</p><p>ofs.close();</p></li></ol><p>文件打开方式：</p><table><thead><tr><th>打开方式</th><th>解释</th></tr></thead><tbody><tr><td>ios::in</td><td>为读文件而打开文件</td></tr><tr><td>ios::out</td><td>为写文件而打开文件</td></tr><tr><td>ios::ate</td><td>初始位置：文件尾</td></tr><tr><td>ios::app</td><td>追加方式写文件</td></tr><tr><td>ios::trunc</td><td>如果文件存在先删除，再创建</td></tr><tr><td>ios::binary</td><td>二进制方式</td></tr></tbody></table><p><strong>注意：</strong>文件打开方式可以配合使用，利用 | 操作符</p><p><strong>例如</strong>：用二进制方式写文件<code>ios::binary | ios::out</code></p><p><code>示例</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ofstream ofs<span class="token punctuation">;</span>ofs<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>ofs <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名：张三"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>ofs <span class="token operator">&lt;&lt;</span> <span class="token string">"性别：男"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>ofs <span class="token operator">&lt;&lt;</span> <span class="token string">"年龄：18"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>ofs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>文本操作必须包含头文件fstream</li><li>读文件可以利用ofstream，或者fstream类</li><li>打开文件时需要指定操作文件的路径，以及打开方式</li><li>利用&lt;&lt;可以向文件中写数据</li><li>操作完毕，要关闭文件</li></ul><h3 id="5-1-2-读文件"><a href="#5-1-2-读文件" class="headerlink" title="5.1.2 读文件"></a>5.1.2 读文件</h3><p>读文件与写文件步骤相似，但是读取方式相较于比较多</p><p>读文件步骤如下：</p><ol><li><p>包含头文件</p><p>#include <fstream></p></li><li><p>创建流对象</p><p>iifstream ifs;</p></li><li><p>打开文件并判断文件是否打开成功</p><p>ifs.open(“文件路径”，打开方式)；</p></li><li><p>读数据</p><p>四种方式读取</p></li><li><p>关闭文件</p><p>ifs.close();</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ifstream ifs<span class="token punctuation">;</span>ifs<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ifs<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"文件打开失败"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>string buf<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ifs<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> buf <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ifs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>总结：</p><ul><li>读文件可以利用ifstream ，或者fstream类</li><li>利用is_open函数可以判断文件是否打开成功</li><li>close 关闭文件</li></ul><h2 id="5-2-二进制文件"><a href="#5-2-二进制文件" class="headerlink" title="5.2 二进制文件"></a>5.2 二进制文件</h2><p>以二进制的方式对文件进行读写操作</p><p>打开方式要制定为ios::binary</p><h3 id="5-2-1-写文件"><a href="#5-2-1-写文件" class="headerlink" title="5.2.1 写文件"></a>5.2.1 写文件</h3><p>二进制方式写文件主要利用流对象调用成员函数write</p><p>函数原型：<code>ostream&amp; write(const char *buffer,int len)</code></p><p>参数解释：字符指针buffer 指向内存中一段存储空间。len 是读写的字节数</p><p><code>示例</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">char</span> m_Name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> m_Age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//二进制文件   写文件</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//包含头文件</span><span class="token comment">//创建输出流对象</span>ofstream <span class="token function">ofs</span><span class="token punctuation">(</span><span class="token string">"person.txt"</span><span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>out <span class="token operator">|</span> ios<span class="token double-colon punctuation">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打开文件</span><span class="token comment">//ofs.open("person.txt", ios::out | ios::binary);</span>Person p <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//4，写文件</span>ofs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭文件</span>ofs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>文件输出流对象 可以通过write函数，以二进制方式写数据</li></ul><h3 id="5-2-2-读文件"><a href="#5-2-2-读文件" class="headerlink" title="5.2.2 读文件"></a>5.2.2 读文件</h3><p>二进制方式读文件主要利用流对象调用成员函数read</p><p>函数原型：<code>istream&amp;read(char *buffer,int len)</code></p><p>len是字节数</p><p><code>示例</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token operator">:</span><span class="token keyword">char</span> m_Name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> m_Age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ifstream <span class="token function">ifs</span><span class="token punctuation">(</span><span class="token string">"person.txt"</span><span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>in <span class="token operator">|</span> ios<span class="token double-colon punctuation">::</span> binary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ifs<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"文件打开失败"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Person p<span class="token punctuation">;</span>ifs<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名： "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄："</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/10/17/4.lei-he-dui-xiang/"/>
      <url>/2021/10/17/4.lei-he-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="4-类和对象"><a href="#4-类和对象" class="headerlink" title="4.类和对象"></a>4.类和对象</h2><h3 id="4-1-封装"><a href="#4-1-封装" class="headerlink" title="4.1 封装"></a>4.1 封装</h3><p>封装是C++面向对象三大特性之一</p><h4 id="4-1-1封装的意义"><a href="#4-1-1封装的意义" class="headerlink" title="4.1.1封装的意义"></a>4.1.1封装的意义</h4><p>（1）.将属性和行为作为一个整体，表现生活中的事物</p><p>（2）.将属性和行为加以权限控制</p><p><strong>封装的意义一：</strong></p><p>在设计类的时候，属性和行为写在一起，表现事物</p><p><code>示例1</code>：设计一个圆类，求圆的周长</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;const double PI &#x3D; 3.14;&#x2F;&#x2F;封装的意义:&#x2F;&#x2F;将属性和行为作为一个整体，用来表现生活中的事物class Circle&#123;public:&#x2F;&#x2F;公共访问权限&#x2F;&#x2F;属性int m_r;&#x2F;&#x2F;半径&#x2F;&#x2F;行为&#x2F;&#x2F;获取圆的周长double calculateZC()&#123;&#x2F;&#x2F;2*pi*r&#x2F;&#x2F;获取圆的周长return 2 * PI * m_r;&#125;&#125;;int main()&#123;&#x2F;&#x2F;通过 圆 类，创造圆的对象&#x2F;&#x2F;c1就是一个具体的圆Circle c1;c1.m_r &#x3D; 10;&#x2F;&#x2F;给圆对象的半径进行赋值操作cout &lt;&lt; &quot;圆的周长为: &quot; &lt;&lt; c1.calculateZC() &lt;&lt; endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>示例2</code>:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;&#x2F;&#x2F;学生类class Student &#123;public:string m_name;int m_id;public:void setName(string name)&#123;m_name &#x3D; name;&#125;void setID(int id)&#123;m_id &#x3D; id;&#125;void showStudent()&#123;cout &lt;&lt; &quot;name:&quot; &lt;&lt; m_name &lt;&lt; endl &lt;&lt; &quot;ID:&quot; &lt;&lt; m_id &lt;&lt; endl;&#125;&#125;;int main()&#123;Student stu;stu.setName(&quot;leimingze&quot;);stu.setID(016511);stu.showStudent();return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>封装意义二：</strong></p><p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p><p>访问权限有三种：</p><ol><li><p>public 公共权限</p></li><li><p>protected 保护权限</p></li><li><p>private 私有权限</p></li></ol><p><code>示例</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;&#x2F;&#x2F;三种权限&#x2F;&#x2F;公共权限 public&#x2F;&#x2F;保护权限 protected&#x2F;&#x2F;私有权限 privateclass Person&#123;public:string m_Name;&#x2F;&#x2F;姓名，公共权限protected:string m_Car;&#x2F;&#x2F;汽车，保护权限private:int m_Password;&#x2F;&#x2F;银行卡密码，私有权限public:void func()&#123;m_Name &#x3D; &quot;leimingze&quot;;m_Car &#x3D; &quot;拖拉机&quot;;m_Password &#x3D; 123456;&#125;&#125;;int main()&#123;Person p;p.m_Name &#x3D; &quot;李四&quot;;&#x2F;&#x2F;p.m_Car&#x3D;&quot;奔驰&quot;;保护权限类外访问不到&#x2F;&#x2F;p.m_Password&#x3D;123;&#x2F;&#x2F;私有权限类外访问不到&#x2F;&#x2F;p.func();cout &lt;&lt; p.m_Name;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-2-struct和class区别"><a href="#4-1-2-struct和class区别" class="headerlink" title="4.1.2 struct和class区别"></a>4.1.2 struct和class区别</h4><p>在C++中struct和class区别在于默认的访问权限不同</p><p>区别：</p><p>（1）struct默认权限为公共</p><p>（2）class默认权限为私有</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;class C1&#123;int m_A;&#x2F;&#x2F;默认为私有权限&#125;;struct C2&#123;int m_A;&#x2F;&#x2F;默认为公共权限&#125;;int main()&#123;C1 c1;c1.m_A &#x3D; 10;&#x2F;&#x2F;错误，访问权限私有C2 c2;c2.m_A &#x3D; 10;&#x2F;&#x2F;正确，访问权限公共return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-3成员属性设置为私有"><a href="#4-1-3成员属性设置为私有" class="headerlink" title="4.1.3成员属性设置为私有"></a>4.1.3成员属性设置为私有</h4><p><strong>优点1：</strong>将所有成员属性设置为私有，可以自己控制读写权限</p><p><strong>优点2：</strong>对于写权限，我们可以检测数据的有效性</p><p><code>示例：</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;class Person &#123;private:string m_Name;&#x2F;&#x2F;姓名，可读可写int m_Age;&#x2F;&#x2F;年龄，只读string m_Lover;&#x2F;&#x2F;情人，只写public:void setName(string name)&#x2F;&#x2F;姓名设置可读可写&#123;m_Name &#x3D; name;&#125;string getName()&#123;return m_Name;&#125;int getAge()&#x2F;&#x2F;获取年龄&#123;return m_Age;&#125;void setAge(int age)&#x2F;&#x2F;设置年龄&#123;if (age &lt; 0 || age&gt;150)&#123;cout &lt;&lt; &quot;你个老妖精&quot; &lt;&lt; endl;return;&#125;m_Age &#x3D; age;&#125;void setLover(string lover)&#x2F;&#x2F;情人设置为只写&#123;m_Lover &#x3D; lover;&#125;&#125;;int main()&#123;Person p;p.setName(&quot;leimingze&quot;);&#x2F;&#x2F;姓名设置cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; p.getName() &lt;&lt; endl;p.setAge(50);&#x2F;&#x2F;年龄设置cout &lt;&lt; &quot;年龄：&quot; &lt;&lt; p.getAge() &lt;&lt; endl;p.setLover(&quot;嘿嘿&quot;);&#x2F;&#x2F;情人设置&#x2F;&#x2F;cout &lt;&lt; &quot;情人：&quot; &lt;&lt; p.m_Lover &lt;&lt; endl;&#x2F;&#x2F;只写不可读return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="练习案例1：设计立方体类"><a href="#练习案例1：设计立方体类" class="headerlink" title="练习案例1：设计立方体类"></a>练习案例1：设计立方体类</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">cube</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token comment">//成员变量(私有)</span><span class="token keyword">int</span> c_L<span class="token punctuation">;</span><span class="token keyword">int</span> c_W<span class="token punctuation">;</span><span class="token keyword">int</span> c_H<span class="token punctuation">;</span><span class="token keyword">int</span> c_area<span class="token punctuation">;</span><span class="token keyword">int</span> c_bulk<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">setL</span><span class="token punctuation">(</span><span class="token keyword">int</span> w_L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//设置长</span>c_L <span class="token operator">=</span> w_L<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">getL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取长</span><span class="token keyword">return</span> c_L<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">setW</span><span class="token punctuation">(</span><span class="token keyword">int</span> w_W<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//设置宽</span>c_W <span class="token operator">=</span> w_W<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">getW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取宽</span><span class="token keyword">return</span> c_W<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">setH</span><span class="token punctuation">(</span><span class="token keyword">int</span> w_H<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//设置高</span>c_H <span class="token operator">=</span> w_H<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">getH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取高</span><span class="token keyword">return</span> c_H<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">getarea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取表面积</span><span class="token keyword">return</span> c_L <span class="token operator">*</span> c_W <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> c_L <span class="token operator">*</span> c_H <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> c_H <span class="token operator">*</span> c_W <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">getbulk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> c_L<span class="token operator">*</span> c_W<span class="token operator">*</span> c_H<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">issameclass</span><span class="token punctuation">(</span>cube<span class="token operator">&amp;</span> cub<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//用成员函数来判断两个函数是否相等，可以在类内访问</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c_L <span class="token operator">==</span> cub<span class="token punctuation">.</span><span class="token function">getL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> c_W <span class="token operator">==</span> cub<span class="token punctuation">.</span><span class="token function">getW</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> c_H <span class="token operator">==</span> cub<span class="token punctuation">.</span><span class="token function">getH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">issame</span><span class="token punctuation">(</span>cube <span class="token operator">&amp;</span>cub1<span class="token punctuation">,</span> cube <span class="token operator">&amp;</span>cub2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cub1<span class="token punctuation">.</span><span class="token function">getL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> cub2<span class="token punctuation">.</span><span class="token function">getL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> cub1<span class="token punctuation">.</span><span class="token function">getW</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> cub2<span class="token punctuation">.</span><span class="token function">getW</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> cub1<span class="token punctuation">.</span><span class="token function">getH</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> cub2<span class="token punctuation">.</span><span class="token function">getH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> w_l<span class="token punctuation">,</span> w_w<span class="token punctuation">,</span> w_h<span class="token punctuation">;</span><span class="token comment">//定义外部函数进行输入，只有public可以输入</span>cube cub1<span class="token punctuation">;</span><span class="token comment">//创建第一个立方体</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入第一个立方体的长宽高"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"长:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin <span class="token operator">>></span> w_l<span class="token punctuation">;</span>cub1<span class="token punctuation">.</span><span class="token function">setL</span><span class="token punctuation">(</span>w_l<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"宽:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cin <span class="token operator">>></span> w_w<span class="token punctuation">;</span>cub1<span class="token punctuation">.</span><span class="token function">setW</span><span class="token punctuation">(</span>w_w<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"高："</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cin <span class="token operator">>></span> w_h<span class="token punctuation">;</span>cub1<span class="token punctuation">.</span><span class="token function">setH</span><span class="token punctuation">(</span>w_h<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"立方体1的面积为"</span> <span class="token operator">&lt;&lt;</span> cub1<span class="token punctuation">.</span><span class="token function">getarea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"立方体1的体积为"</span> <span class="token operator">&lt;&lt;</span> cub1<span class="token punctuation">.</span><span class="token function">getbulk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//创建第二个立方体</span>cube cub2<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入第二个立方体的长宽高"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"长:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin <span class="token operator">>></span> w_l<span class="token punctuation">;</span>cub2<span class="token punctuation">.</span><span class="token function">setL</span><span class="token punctuation">(</span>w_l<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"宽:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin <span class="token operator">>></span> w_w<span class="token punctuation">;</span>cub2<span class="token punctuation">.</span><span class="token function">setW</span><span class="token punctuation">(</span>w_w<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"高："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin <span class="token operator">>></span> w_h<span class="token punctuation">;</span>cub2<span class="token punctuation">.</span><span class="token function">setH</span><span class="token punctuation">(</span>w_h<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"立方体2的面积为"</span> <span class="token operator">&lt;&lt;</span> cub2<span class="token punctuation">.</span><span class="token function">getarea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"立方体2的体积为"</span> <span class="token operator">&lt;&lt;</span> cub2<span class="token punctuation">.</span><span class="token function">getbulk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">bool</span> ret <span class="token operator">=</span> <span class="token function">issame</span><span class="token punctuation">(</span>cub1<span class="token punctuation">,</span> cub2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"cub1和cub2相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"cub1和cub2不相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">bool</span> flag <span class="token operator">=</span> cub1<span class="token punctuation">.</span><span class="token function">issameclass</span><span class="token punctuation">(</span>cub2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"cub1和cub2相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"cub1和cub2不相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="练习案例2：判断点和圆的关系"><a href="#练习案例2：判断点和圆的关系" class="headerlink" title="练习案例2：判断点和圆的关系"></a>练习案例2：判断点和圆的关系</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">point</span><span class="token comment">//先定义一个点</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> p_x<span class="token punctuation">;</span><span class="token keyword">int</span> p_y<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">setx</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//设置x</span>p_x <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">getx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取x</span><span class="token keyword">return</span> p_x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">sety</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//设置y</span>p_y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">gety</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取y</span><span class="token keyword">return</span> p_y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">circle</span><span class="token comment">//定义一个圆类</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> c_r<span class="token punctuation">;</span><span class="token comment">//半径</span>point c_center<span class="token punctuation">;</span><span class="token comment">//圆心</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">setr</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//设置半径</span>c_r <span class="token operator">=</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">getr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取半径</span><span class="token keyword">return</span> c_r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">setcenter</span><span class="token punctuation">(</span>point center<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//设置圆心</span>c_center <span class="token operator">=</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>point <span class="token function">getcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取圆心</span><span class="token keyword">return</span> c_center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">isincircle</span><span class="token punctuation">(</span>circle<span class="token operator">&amp;</span> c<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token comment">//引用不需要拷贝，速度更快</span><span class="token punctuation">&#123;</span><span class="token comment">//计算点到圆心的距离</span><span class="token comment">//获取点到圆心的距离</span><span class="token keyword">double</span> distance <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> p<span class="token punctuation">.</span><span class="token function">getx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> p<span class="token punctuation">.</span><span class="token function">getx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> R1 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>distance <span class="token operator">==</span> R1<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"点在圆上"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>distance <span class="token operator">&lt;</span> R1<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"点在圆内"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"点在圆外"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>circle c<span class="token punctuation">;</span>point center<span class="token punctuation">;</span><span class="token comment">//设置圆心的点</span>c<span class="token punctuation">.</span><span class="token function">setr</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>center<span class="token punctuation">.</span><span class="token function">setx</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>center<span class="token punctuation">.</span><span class="token function">sety</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">setcenter</span><span class="token punctuation">(</span>center<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置一个点</span>point p<span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setx</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">sety</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">isincircle</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-对象的初始化和清理"><a href="#4-2-对象的初始化和清理" class="headerlink" title="4.2 对象的初始化和清理"></a>4.2 对象的初始化和清理</h3><p>（1）生活中我们买的电子产品基本都会有出厂设置，在某一天我们不用的时候也会删除一些自己信息数据保证安全。</p><p>（2）C++中的面向对象来源于生活，每个对象也都会初始设置以及对象的销毁前清理数据的设置。</p><h4 id="4-2-1-构造函数和析构函数"><a href="#4-2-1-构造函数和析构函数" class="headerlink" title="4.2.1 构造函数和析构函数"></a>4.2.1 构造函数和析构函数</h4><p>对象的<strong>初始化和清理</strong>是两个非常重要的安全问题</p><p>如果没有初始化，对其使用后果是未知的</p><p>同样的使用完一个对象或变量，没有及时清理一会造成一定的安全问题</p><p>c++利用<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理作用</p><p>对象的初始化和清理工作是编译器强制要我们做的事情，因此<strong>我们不提供构造和析构，编译器会提供</strong></p><p><strong>编译器提供的构造函数和析构函数是空实现</strong></p><p>（1）<strong>构造函数</strong>：主要作用在于创建对象时为对象成员属性赋值，构造函数由编译器自动调用，无需手动调用。</p><p>（2）<strong>析构函数</strong>：主要作用在于对象销毁前系统自动调用，执行一些清理工作</p><p><strong>构造函数语法：</strong>类名（）{}</p><ol><li>构造函数，没有返回值也没有void</li><li>函数名称与类名相同</li><li>构造函数可以有参数，因此可以发生重载</li><li>程序在调用对象的时候会自动调用构造，无需手动调用，而且只会调用一次</li></ol><p><strong>析构函数语法：</strong>~类名（）{}</p><ol><li>析构函数，没有返回值也没有void</li><li>函数名称与类名相同，在名称前加上符号 ~ </li><li>析构函数不可以有参数，因此不可以发生重载</li><li>程序在对象销毁前会自动调用析构，无需手动调用，而且只会调用一次</li></ol><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;class Person&#123;public:Person()&#x2F;&#x2F;构造函数&#123;cout &lt;&lt; &quot;Person的构造函数调用&quot; &lt;&lt; endl;&#125;~Person()&#123;cout &lt;&lt; &quot;Person的析构函数调用&quot; &lt;&lt; endl;&#125;&#125;;&#x2F;*void test01()&#123;Person p;&#125;*&#x2F;int main()&#123;&#x2F;&#x2F;test01();Person p;&#x2F;&#x2F;这里会出现Person的构造函数调用cout &lt;&lt; &quot;aaaaaa&quot; &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#x2F;&#x2F;这里会出现Person的析构函数调用&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-2构造函数的分类及调用"><a href="#4-2-2构造函数的分类及调用" class="headerlink" title="4.2.2构造函数的分类及调用"></a>4.2.2构造函数的分类及调用</h4><p>两种分类方式：</p><p>按参数分为：有参构造和无参构造</p><p>按类型分为：普通构造和拷贝构造</p><p>三种调用方式：</p><ol><li>括号法</li><li>显示法</li><li>隐式转换法</li></ol><p><code>示例</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;&#x2F;&#x2F;构造函数分类&#x2F;&#x2F;按照参数分类分为 有参和无参构造 无参又称为默认构造函数&#x2F;&#x2F;按照类型分类分为 普通构造和拷贝构造class Person&#123;public:Person()&#x2F;&#x2F;无参（默认）构造函数&#123;cout &lt;&lt; &quot;无参构造函数&quot; &lt;&lt; endl;&#125;Person(int a)&#x2F;&#x2F;有参构造函数&#123;age &#x3D; a;cout &lt;&lt; &quot;有参构造函数&quot; &lt;&lt; endl;&#125;Person(const Person&amp; p)&#x2F;&#x2F;拷贝构造函数&#123;age &#x3D; p.age;cout &lt;&lt; &quot;拷贝构造函数&quot; &lt;&lt; endl;&#125;~Person()&#x2F;&#x2F;析构函数&#123;cout &lt;&lt; &quot;析构函数&quot; &lt;&lt; endl;&#125;public:int age;&#125;;&#x2F;&#x2F;构造函数的调用&#x2F;&#x2F;调用无参构造函数void test01()&#123;Person p;&#125;void test02()&#123;&#x2F;&#x2F;括号法，常用Person p1(10);&#x2F;&#x2F;注意:调用无参构造函数不能加括号，如果加了编译器会认为这是一个函数声明&#x2F;&#x2F;Person p2();cout &lt;&lt; &quot;---------------&quot; &lt;&lt; endl;&#x2F;&#x2F;显式法Person p2 &#x3D; Person(10);cout &lt;&lt; &quot;-----------------&quot; &lt;&lt; endl;Person p3 &#x3D; Person(p2);&#x2F;&#x2F;Person(10)单独写就是匿名对象，当前行结束后，马上析构cout &lt;&lt; &quot;------------------&quot; &lt;&lt; endl;&#x2F;&#x2F;隐式转换法Person p4 &#x3D; 10;&#x2F;&#x2F;Person p4 &#x3D; Person(10);cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;Person p5 &#x3D; p4;&#x2F;&#x2F;Person p5 &#x3D; Person(p4);&#x2F;&#x2F;注意：不能利用拷贝构造函数 初始化匿名对象 编译器认为是对象声明&#x2F;&#x2F;Person(p3)&#x3D;&#x3D;&#x3D;Person p3;&#125;int main()&#123;&#x2F;&#x2F;test01();test02();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-3拷贝构造函数的调用时机"><a href="#4-2-3拷贝构造函数的调用时机" class="headerlink" title="4.2.3拷贝构造函数的调用时机"></a>4.2.3拷贝构造函数的调用时机</h4><p>cpp中拷贝构造函数调用时机通常有三种情况</p><ol><li>使用一个已经创建完毕的对象来初始化一个新对象</li><li>值传递的方式给函数参数传值</li><li>以值方式返回局部对象</li></ol><p><code>示例</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;class Person&#123;public:int mAge;public:Person()&#123;cout &lt;&lt; &quot;无参构造函数&quot; &lt;&lt; endl;mAge &#x3D; 0;&#125;Person(int age)&#123;cout &lt;&lt; &quot;有参构造函数&quot; &lt;&lt; endl;mAge &#x3D; age;&#125;Person(const Person&amp; p)&#123;cout &lt;&lt; &quot;拷贝构造函数&quot; &lt;&lt; endl;mAge &#x3D; p.mAge;&#125;~Person()&#123;cout &lt;&lt; &quot;析构函数&quot; &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;使用一个已经创建完毕的对象来初始化一个新对象void test01()&#123;Person man(100);&#x2F;&#x2F;p对象已经创建完毕Person newman(man);&#x2F;&#x2F;调用拷贝构造函数Person newman2 &#x3D; man;&#x2F;&#x2F;拷贝构造&#x2F;&#x2F;Person newman3;&#x2F;&#x2F;newman3 &#x3D; man;&#x2F;&#x2F;不是调用拷贝构造函数，赋值操作&#125;void dowork(Person p1) &#123;&#125;&#x2F;&#x2F;值传递的方式给函数参数传值void test02()&#123;Person p;&#x2F;&#x2F;无参构造函数dowork(p);&#x2F;&#x2F;相当于Person p1&#x3D;p;&#125;Person dowork2()&#x2F;&#x2F;以值返回局部对象，拷贝一个对象返回&#123;Person p1;cout &lt;&lt; (int*)&amp;p1 &lt;&lt; endl;return p1;&#125;void test03()&#123;Person p&#x3D;dowork2();cout &lt;&lt; (int*)&amp;p &lt;&lt; endl;&#125;int main()&#123;&#x2F;&#x2F;test01();test02();&#x2F;&#x2F;test03();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-4-构造函数调用规则"><a href="#4-2-4-构造函数调用规则" class="headerlink" title="4.2.4 构造函数调用规则"></a>4.2.4 构造函数调用规则</h4><p>默认情况下，c++编译器至少给一个类添加3个函数</p><ol><li>默认构造函数（无参，函数体为空）</li><li>默认析构函数（无参，函数体为空）</li><li>默认拷贝函数，堆属性进行“值”拷贝</li></ol><p>构造函数调用规则如下</p><ol><li><p>如果用户定义<strong>有参</strong>构造函数，c++不再提供默认构造函数，但会提供默认拷贝函数</p></li><li><p>如果用户定义拷贝构造函数，c++不会在提供其他构造函数</p><p><code>示例</code></p></li></ol><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;class Person &#123;public:int age;public:&#x2F;&#x2F;无参（默认）构造函数Person()&#123;cout &lt;&lt; &quot;无参构造函数&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;有参构造函数Person(int a)&#123;age &#x3D; a;cout &lt;&lt; &quot;有参构造函数&quot; &lt;&lt; endl;&#125;Person(const Person&amp; p)&#123;age &#x3D; p.age;cout &lt;&lt; &quot;拷贝构造函数&quot; &lt;&lt; endl;&#125;~Person()&#123;cout &lt;&lt; &quot;析构函数&quot; &lt;&lt; endl;&#125;&#125;;void test01()&#123;Person p1(18);&#x2F;&#x2F;如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作Person p2(p1);cout &lt;&lt; &quot;p2的年龄为：&quot; &lt;&lt; p2.age &lt;&lt; endl;&#125;void test02()&#123;&#x2F;&#x2F;如果用户提供有参构造，编译器不会默认构造，会提供拷贝构造Person p1;&#x2F;&#x2F;此时如果用户自己没有提供默认构造，会出错Person p2(10);&#x2F;&#x2F;用户提供有参构造Person p3(p2);&#x2F;&#x2F;如果用户没有提供有参，编译器会提供&#x2F;&#x2F;如果用户提供拷贝构造，则编译器不会提供其他构造函数Person p4;&#x2F;&#x2F;此时如果用户自己没有提供默认构造,会出错Person p5(10);&#x2F;&#x2F;此时如果用户自己没有提供有参构造，会出错Person p6(p5);&#x2F;&#x2F;用户自己提供拷贝构造&#125;int main()&#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-5-深拷贝与浅拷贝"><a href="#4-2-5-深拷贝与浅拷贝" class="headerlink" title="4.2.5 深拷贝与浅拷贝"></a>4.2.5 深拷贝与浅拷贝</h4><p>深浅拷贝是面试经典问题，是一个坑</p><p><strong>浅拷贝：</strong>简单的赋值拷贝操作</p><p><strong>深拷贝：</strong>在堆区重新申请空间，进行拷贝操作</p><p><code>示例</code></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;class Person&#123;public:int m_age;int* m_height;public:Person()&#x2F;&#x2F;无参构造函数&#123;cout &lt;&lt; &quot;无参构造函数&quot; &lt;&lt; endl;&#125;Person(int age, int height)&#x2F;&#x2F;有参构造函数&#123;cout &lt;&lt; &quot;有参构造函数&quot; &lt;&lt; endl;m_age &#x3D; age;m_height &#x3D; new int(height);&#125;&#x2F;&#x2F;拷贝构造函数Person(const Person&amp; p)&#123;cout &lt;&lt; &quot;拷贝构造函数&quot; &lt;&lt; endl;&#x2F;&#x2F;系统自带的拷贝构造函数存在重复释放堆区的问题&#x2F;&#x2F;如果不利用神拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放m_age &#x3D; p.m_age;m_height &#x3D; new int(*p.m_height);&#125;~Person()&#123;cout &lt;&lt; &quot;析构函数&quot; &lt;&lt; endl;if (m_height !&#x3D; NULL)&#123;delete m_height;&#x2F;&#x2F;将堆区存放的数据删除&#125;&#125;&#125;;void test01()&#123;Person p1(18, 100);Person p2(p1);cout &lt;&lt; &quot;p1的年龄：&quot; &lt;&lt; p1.m_age &lt;&lt; &quot;身高: &quot; &lt;&lt; *p1.m_height &lt;&lt; endl;cout &lt;&lt; &quot;p2的年龄：&quot; &lt;&lt; p2.m_age &lt;&lt; &quot;身高：&quot; &lt;&lt; *p2.m_height &lt;&lt; endl;&#125;int main()&#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>总结</code>：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止栈拷贝带来的问题。</p><h4 id="4-2-6-初始化列表"><a href="#4-2-6-初始化列表" class="headerlink" title="4.2.6 初始化列表"></a>4.2.6 初始化列表</h4><p><strong>作用：</strong></p><p>c++提供了初始化列表语法，用来<strong>初始化属性</strong></p><p>语法：构造函数（）：属性1（值1），属性2（值2）……{}</p><p><code>示例</code></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;class Person&#123;private:int m_A;int m_B;int m_C;public:&#x2F;&#x2F;传统方式初始化&#x2F;&#x2F;Person(int a, int b, int c)&#x2F;&#x2F;&#123;&#x2F;&#x2F;m_A &#x3D; a;&#x2F;&#x2F;m_B &#x3D; b;&#x2F;&#x2F;m_C &#x3D; c;&#x2F;&#x2F;&#125;Person(int a, int b, int c) :m_A(a), m_B(b), m_C(c) &#123;&#125;void PrintPerson()&#123;cout &lt;&lt; &quot;mA:&quot; &lt;&lt; m_A &lt;&lt; endl;cout &lt;&lt; &quot;mB:&quot; &lt;&lt; m_B &lt;&lt; endl;cout &lt;&lt; &quot;mC:&quot; &lt;&lt; m_C &lt;&lt; endl;&#125;&#125;;int main()&#123;Person p(1, 2, 3);p.PrintPerson();return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-7类对象作为类成员"><a href="#4-2-7类对象作为类成员" class="headerlink" title="4.2.7类对象作为类成员"></a>4.2.7类对象作为类成员</h4><p>c++类中的成员可以是另一个类的对象，我们称该成员为对象成员</p><p>eg.</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class A&#123;&#125;class B&#123;    A a;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>B类中有对象A作为成员，A对象成员</p><p>那么当创建B对象时，A与B的构造和析构的顺序是谁西先谁后？</p><p><code>示例</code></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;class Phone&#123;public:string m_PhoneName;public:Phone(string name)&#123;m_PhoneName &#x3D; name;cout &lt;&lt; &quot;Phone构造&quot; &lt;&lt; endl;&#125;~Phone()&#123;cout &lt;&lt; &quot;phone析构&quot; &lt;&lt; endl;&#125;&#125;;class Person&#123;public:string m_Name;Phone m_Phone;&#x2F;&#x2F;成员对象public:Person(string name, string pName) :m_Name(name), m_Phone(pName)&#x2F;&#x2F;初始化&#123;cout &lt;&lt; &quot;Person构造&quot; &lt;&lt; endl;&#125;~Person()&#123;cout &lt;&lt; &quot;Person析构&quot; &lt;&lt; endl;&#125;void playGame()&#123;cout &lt;&lt; m_Name &lt;&lt; &quot;使用&quot; &lt;&lt; m_Phone.m_PhoneName &lt;&lt; endl;&#125;&#125;;void test01()&#123;&#x2F;&#x2F;当类中成员是其他类对象时，我们称该成员为对象成员&#x2F;&#x2F;构造的顺序时：先调用对象成员的构造，再调用本类构造&#x2F;&#x2F;析构顺序与构造顺序相反（先有子体，才能组成母体，母体释放，字体才能恢复自由）类比栈Person p(&quot;leimingze&quot;, &quot;苹果x&quot;);p.playGame();&#125;int main()&#123;test01();return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-8-静态成员"><a href="#4-2-8-静态成员" class="headerlink" title="4.2.8 静态成员"></a>4.2.8 静态成员</h4><p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p><p>静态成员分为：</p><ol><li><p>静态成员变量</p><p>(1). <strong>所有对象共享同一份数据</strong> </p><p>(2).在编译阶段分配内存</p><p>(3).类内声明，类外初始化</p></li><li><p>静态成员函数</p><p>(1).<strong>所有对象共享同一个函数</strong></p><p>(2).<strong>静态成员函数只能访问静态成员变量</strong></p><p><code>静态成员变量</code></p></li></ol><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;class Person&#123;public:static int m_A;&#x2F;&#x2F;静态成员变量&#x2F;&#x2F;静态成员变量特点；&#x2F;&#x2F;1 在编译阶段分配内存&#x2F;&#x2F;2 类内声明，类外初始化&#x2F;&#x2F;3 所有对象共享同一份数据private:static int m_B;&#x2F;&#x2F;静态成员变量初始化也是有访问权限的&#125;;int Person::m_A &#x3D; 10;int Person::m_B &#x3D; 10;void test01()&#123;&#x2F;&#x2F;静态成员变量两种访问方式&#x2F;&#x2F;1 通过对象Person p1;p1.m_A &#x3D; 100;cout &lt;&lt; &quot;p1.m_A:&quot; &lt;&lt; p1.m_A &lt;&lt; endl;Person p2;p2.m_A &#x3D; 200;cout &lt;&lt; &quot;p1.m_A &#x3D; &quot; &lt;&lt; p1.m_A &lt;&lt; endl;&#x2F;&#x2F;共享同一份数据是，所以m_A会发生改变cout &lt;&lt; &quot;P2.m_A &#x3D; &quot; &lt;&lt; p2.m_A &lt;&lt; endl;&#x2F;&#x2F;2 通过类名cout &lt;&lt; &quot;m_A &#x3D; &quot; &lt;&lt; Person::m_A &lt;&lt; endl;&#x2F;&#x2F;cout&lt;&lt;&quot;m_B &#x3D; &quot;&lt;&lt;Person::m_B&lt;&lt;endl;&#x2F;&#x2F;私有权限访问不到&#125;int main()&#123;test01();return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>静态成员函数</code></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;class Person&#123;public:static int m_A;&#x2F;&#x2F;静态成员变量int m_B;&#x2F;&#x2F;这个必须通过对象才能调用，而静态是全局共享的，不能访问非静态量public:&#x2F;&#x2F;静态成员函数特点&#x2F;&#x2F;1 程序共享一个函数&#x2F;&#x2F;2 静态成员函数只能访问静态成员变量static void func()&#123;cout &lt;&lt; &quot;func调用&quot; &lt;&lt; endl;m_A &#x3D; 100;&#x2F;&#x2F;m_b&#x3D;100；&#x2F;&#x2F;错误，不可访问非静态程序变量&#125;private:static void func2()&#x2F;&#x2F;静态成员函数也是有访问权限的&#123;cout &lt;&lt; &quot;func2调用&quot; &lt;&lt; endl;&#125;&#125;;int Person::m_A &#x3D; 10;void test01()&#123;&#x2F;&#x2F;静态成员变量两种访问方式&#x2F;&#x2F;1 通过对象进行访问Person p1;p1.func();&#x2F;&#x2F;2 通过类名，所有的共有，不属于单独一个Person::func();&#x2F;&#x2F;Person::func2();&#x2F;&#x2F;私有静态权限不可访问&#125;int main()&#123;test01();return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-cpp对象模型和this指针"><a href="#4-3-cpp对象模型和this指针" class="headerlink" title="4.3 cpp对象模型和this指针"></a>4.3 cpp对象模型和this指针</h3><h4 id="4-3-1成员变量和成员函数分开存储"><a href="#4-3-1成员变量和成员函数分开存储" class="headerlink" title="4.3.1成员变量和成员函数分开存储"></a>4.3.1成员变量和成员函数分开存储</h4><p>在cpp中，类内成员变量和成员函数分开存储</p><p>只有非静态成员变量才属于类的对象上</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;class Person&#123;public:int mA &#x3D; 0;&#x2F;&#x2F;非静态成员变量占对象空间static int mB;&#x2F;&#x2F;静态成员变量不占对象空间public:void func()&#x2F;&#x2F;函数不占用对象空间，所有函数共享一个函数&#123;cout &lt;&lt; &quot;mA:&quot; &lt;&lt; this-&gt;mA &lt;&lt; endl;&#125;&#x2F;&#x2F;静态成员函数也不占对象空间static void sfunc() &#123;&#125;&#125;;int main()&#123;&#x2F;&#x2F;一个“空”对象占用一个字节,一个int 变量占四个字节cout &lt;&lt; sizeof(Person) &lt;&lt; endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-2-this-指针概念"><a href="#4-3-2-this-指针概念" class="headerlink" title="4.3.2 this 指针概念"></a>4.3.2 this 指针概念</h4><p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会公用一块代码</p><p>那么问题是：这一块代码是如何区分哪个对象调用自己的呢？</p><p>cpp通过提供特殊的对象指针，this指针，解决上述问题，this指针指向被调用成员函数所属的对象</p><p>this指针是隐含每一个非静态成员函数内的一种指针</p><p>this指针不需要定义，直接使用即可</p><p>this指针的用途：</p><ol><li>当形参和成员变量同名时，可用this指针来区别</li><li>在类的非静态成员函数中返回对象本身，可使用return *this</li></ol><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;class Person&#123;public:Person(int age)&#123;&#x2F;&#x2F;当形参和成员变量同名时，可用this指针来区分this-&gt;age &#x3D; age;&#125;Person&amp; PersonAddPerson(Person p)&#123;this-&gt;age +&#x3D; p.age;return *this;&#x2F;&#x2F;返回对象本身&#125;int age;&#125;;void test01()&#123;Person p1(10);cout &lt;&lt; &quot;p1.age &#x3D; &quot; &lt;&lt; p1.age &lt;&lt; endl;Person p2(10);p2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);cout &lt;&lt; &quot;p2.age &#x3D; &quot; &lt;&lt; p2.age &lt;&lt; endl;&#125;int main()&#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-3空指针访问成员函数"><a href="#4-3-3空指针访问成员函数" class="headerlink" title="4.3.3空指针访问成员函数"></a>4.3.3空指针访问成员函数</h4><p>cpp中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针如果用到this指针，需要加以判断保证代码的健壮性</p><p>示例:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;class Person&#123;public:void ShowClassName()&#123;cout &lt;&lt; &quot;我是Person类&quot; &lt;&lt; endl;&#125;void ShowPerson()&#123;if (this &#x3D;&#x3D; NULL)return;cout &lt;&lt; mAge &lt;&lt; endl;&#125;public: int mAge;&#125;;void test01()&#123;Person* p &#x3D; NULL;p-&gt;ShowClassName();&#x2F;&#x2F;空指针，可以调用成员函数p-&gt;ShowPerson();&#x2F;&#x2F;但是如果成员函数中使用了this指针，就不可以了&#125;int main()&#123;test01();return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-4-const-修饰成员函数"><a href="#4-3-4-const-修饰成员函数" class="headerlink" title="4.3.4 const 修饰成员函数"></a>4.3.4 const 修饰成员函数</h4><p><strong>常函数</strong></p><ol><li>成员函数后const 后我们称这个函数为<strong>常函数</strong></li><li>常函数内不可以修改成员属性</li><li>成员属性声明时可以加关键字mutable后，在常函数中依然可以修改</li></ol><p><strong>常对象</strong></p><ol><li>声明对象前加const称该对象为常对象</li><li>常对象只能调用常函数</li></ol><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;class Person&#123;public:int m_A;mutable int m_B;&#x2F;&#x2F;相当于钥匙,可以修改public:Person()&#123;m_A &#x3D; 0;m_B &#x3D; 0;&#125;&#x2F;&#x2F;this指针的本质是一个指针常量，指针的指向不可修改&#x2F;&#x2F;如果想让指针指向的值也不可以修改，需要声明常函数void ShowPerson()const&#123;&#x2F;&#x2F;const Type* const pointer;&#x2F;&#x2F;this &#x3D; NULL;&#x2F;&#x2F;不能修改指针的指向 Person *const this;&#x2F;&#x2F;this-&gt;m_A&#x3D;100;&#x2F;&#x2F;但this指向的对象的数据是可以改变的&#x2F;&#x2F;const 修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutablethis-&gt;m_B &#x3D; 100;&#125;void MyFunc()const&#123;&#x2F;&#x2F;m_A &#x3D; 10000;&#125;&#125;;void test01()&#123;const Person person;&#x2F;&#x2F;常量对象cout &lt;&lt; person.m_A &lt;&lt; endl;&#x2F;&#x2F;常对象成员变量的值可以访问，但是不可以改变person.m_B &#x3D; 10;&#x2F;&#x2F;但是常对象可以修改mutable修饰的成员变量的值person.MyFunc();&#x2F;&#x2F;常对象只能调用常函数&#125;int main()&#123;test01();return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-友元"><a href="#4-4-友元" class="headerlink" title="4.4 友元"></a>4.4 友元</h3><p>生活中你的家中有客厅（Public），有你的卧室（Private）客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去，但是，你也可以允许你的好闺蜜好基友进去。</p><p>在程序里，这些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术，友元的目的就是让一个函数或者类访问另一个类中的私有成员</p><p>关键字<strong>friend</strong></p><p>友元的三种表现</p><ol><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ol><h4 id="4-4-1-全局函数做友元"><a href="#4-4-1-全局函数做友元" class="headerlink" title="4.4.1 全局函数做友元"></a>4.4.1 全局函数做友元</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;class Building&#123;&#x2F;&#x2F;告诉编译器 goodGay全局函数是Buliding类的好朋友，可以访问类中的私有内容friend void goodGay(Building &amp;building);public:Building()&#123;this-&gt;m_SittingRoom &#x3D; &quot;客厅&quot;;this-&gt;m_BedRoom &#x3D; &quot;卧室&quot;;&#125;public:string m_SittingRoom;private:string m_BedRoom;&#125;;void goodGay(Building &amp;building)&#123;cout &lt;&lt; &quot;好基友正在访问：&quot; &lt;&lt; building.m_SittingRoom &lt;&lt; endl;cout &lt;&lt; &quot;好基友正在访问：&quot; &lt;&lt; building.m_BedRoom &lt;&lt; endl;&#125;void test01()&#123;Building b;goodGay(b);&#125;int main()&#123;test01();return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-2-类做友元"><a href="#4-4-2-类做友元" class="headerlink" title="4.4.2 类做友元"></a>4.4.2 类做友元</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;class Building;&#x2F;&#x2F;这里要提前声明class goodGay&#123;public:goodGay();void visit();private:Building *building;&#125;;class Building&#123;&#x2F;&#x2F;告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容friend class goodGay;public:Building();public:string m_SittingRoom;private:string m_BedRoom;&#125;;Building::Building()&#123;this-&gt;m_SittingRoom &#x3D; &quot;客厅&quot;;this-&gt;m_BedRoom &#x3D; &quot;卧室&quot;;&#125;goodGay::goodGay()&#123;building &#x3D; new Building;&#x2F;&#x2F;创建建筑物对象&#125;void goodGay::visit()&#123;cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;&#125;void test01()&#123;goodGay gg;gg.visit();&#125;int main()&#123;test01();return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-3成员函数做友元"><a href="#4-4-3成员函数做友元" class="headerlink" title="4.4.3成员函数做友元"></a>4.4.3成员函数做友元</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;class Building;class goodGay&#123;public:goodGay();void visit();&#x2F;&#x2F;只让visit函数作为Building的好朋友，可以发访问Building中私有内容void visit2();private:Building* building;&#125;;class Building&#123;friend void goodGay::visit();public:Building();public:string m_SittingRoom;&#x2F;&#x2F;卧室private:string m_BedRoom;&#x2F;&#x2F;客厅&#125;;Building::Building()&#123;this-&gt;m_SittingRoom &#x3D; &quot;客厅&quot;;this-&gt;m_BedRoom &#x3D; &quot;卧室&quot;;&#125;goodGay::goodGay()&#123;building &#x3D; new Building;&#125;void goodGay::visit()&#123;cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;&#125;void goodGay::visit2()&#123;cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;&#x2F;&#x2F;cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;&#x2F;&#x2F;不可访问&#125;void test01()&#123;goodGay gg;gg.visit();&#125;int main()&#123;test01();return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-运算符重载"><a href="#4-5-运算符重载" class="headerlink" title="4.5 运算符重载"></a>4.5 运算符重载</h3><p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p><h4 id="4-5-1-加号运算符重载"><a href="#4-5-1-加号运算符重载" class="headerlink" title="4.5.1 加号运算符重载"></a>4.5.1 加号运算符重载</h4><p>作用：实现两个自定义数据类型相加的运算</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token keyword">int</span> m_B<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//无参默认构造</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token comment">//有参构造</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_A <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_B <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//成员函数实现+号运算符重载</span>Person <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person temp<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>m_A <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>m_A <span class="token operator">+</span> p<span class="token punctuation">.</span>m_A<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>m_B <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>m_B <span class="token operator">+</span> p<span class="token punctuation">.</span>m_B<span class="token punctuation">;</span><span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//Person operator+(const Person&amp; p1,const Person&amp; p2)</span><span class="token comment">//&#123;</span><span class="token comment">//Person temp(0, 0);</span><span class="token comment">//temp.m_A = p1.m_A + p2.m_A;</span><span class="token comment">//temp.m_B = p1.m_B + p2.m_B;</span><span class="token comment">//return temp;</span><span class="token comment">//&#125;</span>Person <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person temp<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>m_A <span class="token operator">=</span> p<span class="token punctuation">.</span>m_A <span class="token operator">+</span> val<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>m_B <span class="token operator">=</span> p<span class="token punctuation">.</span>m_B <span class="token operator">+</span> val<span class="token punctuation">;</span><span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person p3 <span class="token operator">=</span> p1 <span class="token operator">+</span> p2<span class="token punctuation">;</span><span class="token comment">//相当于p2.operator+(p1);</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mA:"</span> <span class="token operator">&lt;&lt;</span> p3<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> <span class="token string">" mB:"</span> <span class="token operator">&lt;&lt;</span> p3<span class="token punctuation">.</span>m_B <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>Person p4 <span class="token operator">=</span> p3 <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mA:"</span> <span class="token operator">&lt;&lt;</span> p4<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> <span class="token string">" mB:"</span> <span class="token operator">&lt;&lt;</span> p4<span class="token punctuation">.</span>m_B <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结1：对于内置的数据类型表达式的运算符是不可能改变的</p><p>总结2：不要滥用运算符重载</p><h4 id="4-5-2-左移运算符重载"><a href="#4-5-2-左移运算符重载" class="headerlink" title="4.5.2 左移运算符重载"></a>4.5.2 左移运算符重载</h4><p>作用：可以输出自定义数据类型</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> cout<span class="token punctuation">,</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token keyword">int</span> m_B<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_A <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_B <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//成员函数实现不了p&lt;&lt;cout我们想要的效果</span><span class="token comment">//void operator &lt;&lt; (Person&amp; p) &#123;&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//全局函数实现左移重载</span><span class="token comment">//ostream对象只能有一个</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> cout<span class="token punctuation">,</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a:"</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> <span class="token string">"b:"</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_B<span class="token punctuation">;</span><span class="token comment">//无法直接访问，需要写友元函数</span><span class="token keyword">return</span> cout<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> p1 <span class="token operator">&lt;&lt;</span> <span class="token string">"helloworld"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：重载左移运算配合友元可以实现输出自定义数据类型</p><h4 id="4-5-3-递增运算符重载"><a href="#4-5-3-递增运算符重载" class="headerlink" title="4.5.3 递增运算符重载"></a>4.5.3 递增运算符重载</h4><p>作用：通过重载递增运算符，实现自己的整数数据</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyInteger</span><span class="token punctuation">&#123;</span><span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> cout<span class="token punctuation">,</span> MyInteger myint<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> m_Num<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">MyInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_Num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//前置++</span>MyInteger<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回引用的目的是链式操作的影响</span><span class="token punctuation">&#123;</span><span class="token comment">//先++</span>m_Num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//再返回</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token comment">//类的非静态成员函数返回对象本身用return *this</span><span class="token punctuation">&#125;</span><span class="token comment">//后置++</span>MyInteger <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//先返回</span>MyInteger temp <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token comment">//记录当前本身的值，然后让本身的值++，但是返回的是以前的</span>m_Num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> cout<span class="token punctuation">,</span> MyInteger myint<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> myint<span class="token punctuation">.</span>m_Num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> cout<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>MyInteger myInt<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>myInt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> myInt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>MyInteger myInt<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> myInt<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> myInt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：迁至递增返回引用，后置递增返回</p><h4 id="4-5-4-赋值运算符重载"><a href="#4-5-4-赋值运算符重载" class="headerlink" title="4.5.4 赋值运算符重载"></a>4.5.4 赋值运算符重载</h4><p>cpp编译器至少给一个类添加4个函数</p><ol><li>默认构造函数（无参，函数体为空）</li><li>默认析构函数（无参，函数体为空）</li><li>默认拷贝构造函数，对属性进行值拷贝</li><li>赋值运算符 operator=，对属性进行值拷贝</li></ol><p>如果类中属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span><span class="token operator">*</span> m_Age<span class="token punctuation">;</span><span class="token comment">//年龄指针</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//将年龄数据开辟到堆区</span>m_Age <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Person<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m_Age <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">//先初始化</span><span class="token punctuation">&#123;</span><span class="token keyword">delete</span> m_Age<span class="token punctuation">;</span>m_Age <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//编译器提供的代码是浅拷贝</span><span class="token comment">//m_Age=p.m_Age;</span><span class="token comment">//提供深拷贝 解决浅拷贝问题</span>m_Age <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">.</span>m_Age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m_Age <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">delete</span> m_Age<span class="token punctuation">;</span>m_Age <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p3 <span class="token operator">=</span> p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span><span class="token comment">//赋值操作</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p1的年龄为:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p1<span class="token punctuation">.</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p2的年龄为:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p2<span class="token punctuation">.</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p3的年龄为:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p3<span class="token punctuation">.</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-5-关系运算符重载"><a href="#4-4-5-关系运算符重载" class="headerlink" title="4.4.5 关系运算符重载"></a>4.4.5 关系运算符重载</h4><p><strong>作用：</strong>重载关系运算符，可以让两个自定义对象进行对比操作</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>string m_Name<span class="token punctuation">;</span><span class="token keyword">int</span> m_Age<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>m_Age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span>Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_Name <span class="token operator">==</span> p<span class="token punctuation">.</span>m_Name <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token operator">-></span>m_Age <span class="token operator">==</span> p<span class="token punctuation">.</span>m_Age<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span>Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_Name <span class="token operator">==</span> p<span class="token punctuation">.</span>m_Name <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token operator">-></span>m_Age <span class="token operator">==</span> p<span class="token punctuation">.</span>m_Age<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person <span class="token function">a</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">b</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a和b相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a和b不相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a和b不相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a和b相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-6-函数调用运算符重载"><a href="#4-5-6-函数调用运算符重载" class="headerlink" title="4.5.6 函数调用运算符重载"></a>4.5.6 函数调用运算符重载</h4><ol><li>函数调用运算符()也可以重载</li><li>由于重载后使用的方式非常想函数的调用，因此成为仿函数</li><li>仿函数没有固定的写法，非常灵活</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyPrint</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>string text<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> text <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//重载的()操作符 也成为仿函数</span>MyPrint myFunc<span class="token punctuation">;</span><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-继承"><a href="#4-6-继承" class="headerlink" title="4.6 继承"></a>4.6 继承</h3><p><strong>继承是面向对象三大特征之一</strong></p><p>在定义一些类时，下级别的成员除了拥有上一级的共性，还有自己的特性，这个时候我们就可以考虑利用继承的技术，减少重复代码。</p><h4 id="4-6-1-继承的基本语法"><a href="#4-6-1-继承的基本语法" class="headerlink" title="4.6.1  继承的基本语法"></a>4.6.1  继承的基本语法</h4><p><code>示例</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">BasePage</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"首页、公开课、登录、注册...（公共头部）"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"帮助中心、交流合作、站内地图...(公共底部)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Java, Python, cpp...(公共分类列表)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//java页面</span><span class="token keyword">class</span> <span class="token class-name">Java</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">BasePage</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Java学科视频"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Java下载视频页面如下:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>Java ja<span class="token punctuation">;</span>ja<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ja<span class="token punctuation">.</span><span class="token function">footer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ja<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ja<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结</strong></p><p>继承的好处：可以减少重复的代码</p><p>class A:class B;</p><p>A类称为子类 或 派生类</p><p>B类称为父类 或 基类</p><p><strong>派生类中的成员，包含两大部分：</strong></p><p>一类是从基类继承过来的，一类是自己增加的成员</p><p>从基类继承过来的表现其共性，而新增成员体现了其个性</p><h4 id="4-6-2-继承方式"><a href="#4-6-2-继承方式" class="headerlink" title="4.6.2 继承方式"></a>4.6.2 继承方式</h4><p>继承的语法: <code>class 子类：继承方式 父类</code></p><p><strong>继承方式一共有三种</strong></p><ol><li>公共继承</li><li>保护继承</li><li>私有继承</li></ol><p><img src="C:\Users\24543\AppData\Roaming\Typora\typora-user-images\image-20211011001600543.png" alt="image-20211011001600543"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Base1</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span><span class="token keyword">int</span> m_B<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> m_C<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//公共继承</span><span class="token keyword">class</span> <span class="token class-name">Son1</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base1</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_A<span class="token punctuation">;</span><span class="token comment">//可访问public权限</span>m_B<span class="token punctuation">;</span><span class="token comment">//可访问protected权限</span><span class="token comment">//m_C;//私有权限不可访问</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">myClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Son1 s1<span class="token punctuation">;</span>s1<span class="token punctuation">.</span>m_A<span class="token punctuation">;</span><span class="token comment">//其他类只能访问公共权限</span><span class="token comment">//s1.m_B;不可访问</span><span class="token comment">//s1.m_C;//不可访问</span><span class="token punctuation">&#125;</span><span class="token comment">//保护继承</span><span class="token keyword">class</span> <span class="token class-name">Base2</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span><span class="token keyword">int</span> m_B<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> m_C<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son2</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">protected</span> <span class="token class-name">Base2</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_A<span class="token punctuation">;</span><span class="token comment">//可访问protected权限</span>m_B<span class="token punctuation">;</span><span class="token comment">//可访问protected权限</span><span class="token comment">//m_C;//私有权限不可访问</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">myClass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Son2 s<span class="token punctuation">;</span><span class="token comment">//s.m_A//不可访问,保护全新啊</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Base3</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span><span class="token keyword">int</span> m_B<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> m_C<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son3</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">private</span> <span class="token class-name">Base3</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_A<span class="token punctuation">;</span><span class="token comment">//可访问private权限</span>m_B<span class="token punctuation">;</span><span class="token comment">//可访问private权限</span><span class="token comment">//m_C;//不可访问</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">GrandSon3</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Son3</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//Son3是似有继承，所以继承Son3的属性在GrandSon3中都无法访问到</span><span class="token comment">//m_A;</span><span class="token comment">//m_B;</span><span class="token comment">//m_C;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">myClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">myClass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-6-3-继承中的对象模型"><a href="#4-6-3-继承中的对象模型" class="headerlink" title="4.6.3 继承中的对象模型"></a>4.6.3 继承中的对象模型</h4><p><strong>问题</strong>：从父类继承过来的成员，那些属于子类对象中？</p><p><code>示例</code>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span><span class="token keyword">int</span> m_B<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> m_C<span class="token punctuation">;</span><span class="token comment">//私有成员只是被隐藏了，但是还是会被继承下去</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//公共继承</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_D<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof Son = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Son<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-6-4-继承中构造和析构顺序"><a href="#4-6-4-继承中构造和析构顺序" class="headerlink" title="4.6.4 继承中构造和析构顺序"></a>4.6.4 继承中构造和析构顺序</h4><p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p><p>问题：父类和子类的构造和析构顺序谁先谁后？</p><p><code>示例：</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base的构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base的析构函数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Son的构造函数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Son的析构函数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//继承中 先调用父类的构造函数，再调哟个子类的构造函数，析构顺序与构造相反</span>Son s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：继承中 先调用父类的构造函数，再调用子类的构造函数，析构顺序与构造相反</p><h4 id="4-6-5-继承同类成员处理方式"><a href="#4-6-5-继承同类成员处理方式" class="headerlink" title="4.6.5 继承同类成员处理方式"></a>4.6.5 继承同类成员处理方式</h4><p>问题：当子类与父类出现同名成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p><ol><li>访问子类同名成员 直接访问即可</li><li>访问父类同名成员 需要加作用域</li></ol><p><code>示例</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_A <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base - func()调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base - func(int a)调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span>  m_A<span class="token punctuation">;</span><span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_A <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数</span><span class="token comment">//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Son - func()的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Son s<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Son下的m_A= "</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base下的m_A= "</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>Base<span class="token double-colon punctuation">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token class-name">Base</span><span class="token double-colon punctuation">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token class-name">Base</span><span class="token double-colon punctuation">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ol><li>子类对象可以直接访问到子类中同名成员</li><li>子类对象加作用域可以访问到父类同名成员</li><li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</li></ol><h4 id="4-6-6-继承同名静态成员处理方式"><a href="#4-6-6-继承同名静态成员处理方式" class="headerlink" title="4.6.6 继承同名静态成员处理方式"></a>4.6.6 继承同名静态成员处理方式</h4><p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p><p>静态成员和非静态成员出现同名，处理方式一致</p><ol><li>访问子类同名成员 直接访问即可</li><li>访问父类同名成员 需要加作用域</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base - static void func()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base - static void func(int a)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> Base<span class="token double-colon punctuation">::</span>m_A <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Son - static void func()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> Son<span class="token double-colon punctuation">::</span>m_A <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token comment">//同名成员函数</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//通过对象访问</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"通过对象访问"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>Son s<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Son 下 m_A = "</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base 下 m_A = "</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>Base<span class="token double-colon punctuation">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//通过类名访问</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"通过类名访问"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Son 下 m_A = "</span> <span class="token operator">&lt;&lt;</span> Son<span class="token double-colon punctuation">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base 下 m_A = "</span> <span class="token operator">&lt;&lt;</span> Son<span class="token double-colon punctuation">::</span>Base<span class="token double-colon punctuation">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//通过对象访问</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"通过对象访问：："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>Son s<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token class-name">Base</span><span class="token double-colon punctuation">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"通过类名访问:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token class-name">Son</span><span class="token double-colon punctuation">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Son<span class="token double-colon punctuation">::</span><span class="token class-name">Base</span><span class="token double-colon punctuation">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//出现同名，子类会隐藏掉父类中所有同名成员，需要加作用域访问</span>Son<span class="token double-colon punctuation">::</span><span class="token class-name">Base</span><span class="token double-colon punctuation">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-6-7-多继承语法"><a href="#4-6-7-多继承语法" class="headerlink" title="4.6.7 多继承语法"></a>4.6.7 多继承语法</h4><p>cpp允许一个类继承多个类</p><p>语法：class 子类 ：继承方式 父类1，继承方式，父类2</p><p>多继承可能会引发父类中同名成员出现，所以加作用域区分</p><p><strong>cpp实际开发中不建议使用多态</strong></p><p><code>示例</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Base1</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Base1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_A <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Base2</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Base2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_A <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base2</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">Base1</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_C <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>m_D <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> m_C<span class="token punctuation">;</span><span class="token keyword">int</span> m_D<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Son s<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof Son = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>Base1<span class="token double-colon punctuation">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>Base2<span class="token double-colon punctuation">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-6-8-菱形继承"><a href="#4-6-8-菱形继承" class="headerlink" title="4.6.8 菱形继承"></a>4.6.8 菱形继承</h4><p><strong>菱形继承概念:</strong></p><p>两个派生类继承同一个基类</p><p>又有某个类同时继承两个派生类</p><p>这种继承被称为菱形继承，或者钻石继承</p><p><strong>典型的菱形继承案例</strong></p><p><img src="C:\Users\24543\AppData\Roaming\Typora\typora-user-images\image-20211011014524985.png" alt="image-20211011014524985"></p><p><strong>菱形继承问题：</strong></p><ol><li>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性</li><li>草泥马继承自动物的数据继承了两份，实则只需要一份就好</li></ol><p><code>示例</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_Age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//继承前加virtual关键字后，变成虚继承</span><span class="token comment">//此时公共的父类Animal称为虚基类</span><span class="token keyword">class</span> <span class="token class-name">Sheep</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">Animal</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Tuo</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">Animal</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">sheepTuo</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Sheep</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">Tuo</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sheepTuo st<span class="token punctuation">;</span>st<span class="token punctuation">.</span>Sheep<span class="token double-colon punctuation">::</span>m_Age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>st<span class="token punctuation">.</span>Tuo<span class="token double-colon punctuation">::</span>m_Age <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"st.Sheep::m_Age = "</span> <span class="token operator">&lt;&lt;</span> st<span class="token punctuation">.</span>Sheep<span class="token double-colon punctuation">::</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"st.Tuo::m_Age = "</span> <span class="token operator">&lt;&lt;</span> st<span class="token punctuation">.</span>Tuo<span class="token double-colon punctuation">::</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"st.m_Age = "</span> <span class="token operator">&lt;&lt;</span> st<span class="token punctuation">.</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//类似于数据共享</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-7-多态"><a href="#4-7-多态" class="headerlink" title="4.7  多态"></a>4.7  多态</h3><h4 id="4-7-1-多态的基本概念"><a href="#4-7-1-多态的基本概念" class="headerlink" title="4.7.1 多态的基本概念"></a>4.7.1 多态的基本概念</h4><p><strong>多态时cpp面向对象的三大特性之一</strong></p><p>多态分为两类</p><ol><li>静态多态：函数重载和运算符重载属于静态多态，复用函数名</li><li>动态多态：派生类和虚函数实现运行时多态</li></ol><p>静态多态和动态多态区别</p><ol><li>静态多态的函数地址早绑定 - 编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定 - 运行阶段确定函数地址</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//Speak函数就是虚函数</span><span class="token comment">//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"动物在说话"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"小猫在说话"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"小狗在说话"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//我们希望传入什么对象，那么就调用什么对象的函数</span><span class="token comment">//如果函数地址在编译阶段就能确定，那么静态联编</span><span class="token comment">//如果函数地址在运行阶段才能确定，就是动态联编</span><span class="token keyword">void</span> <span class="token function">DoSpeak</span><span class="token punctuation">(</span>Animal <span class="token operator">&amp;</span> animal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>animal<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token comment">//多态满足条件： </span><span class="token comment">//1、有继承关系</span><span class="token comment">//2、子类重写父类中的虚函数</span><span class="token comment">//多态使用：</span><span class="token comment">//父类指针或引用指向子类对象</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Cat cat<span class="token punctuation">;</span><span class="token function">DoSpeak</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span>Dog dog<span class="token punctuation">;</span><span class="token function">DoSpeak</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>多态满足条件</p><ol><li>有继承关系</li><li>子类重写父类中的虚函数</li></ol><p>多态使用条件</p><p>父类指针或引用指向子类对象</p><p>重写：函数返回值类型 函数名 参数列表 完全一致称为重写</p><h4 id="4-7-2-多态案例一-计算器类"><a href="#4-7-2-多态案例一-计算器类" class="headerlink" title="4.7.2 多态案例一-计算器类"></a>4.7.2 多态案例一-计算器类</h4><p>案例描述：</p><p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p><p>多态的优点：</p><ol><li>代码组织结构清晰</li><li>可读性强</li><li>利于前期和后期的扩展以及维护</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//普通实现</span><span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span>string oper<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>oper <span class="token operator">==</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> m_Num1 <span class="token operator">+</span> m_Num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oper <span class="token operator">==</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> m_Num1 <span class="token operator">-</span> m_Num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oper <span class="token operator">==</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> m_Num1 <span class="token operator">*</span> m_Num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//如果要提供新的运算，需要修改源码</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> m_Num1<span class="token punctuation">;</span><span class="token keyword">int</span> m_Num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//普通实现测试</span>Calculator c<span class="token punctuation">;</span>c<span class="token punctuation">.</span>m_Num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span>m_Num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>m_Num1 <span class="token operator">&lt;&lt;</span> <span class="token string">" + "</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>m_Num2 <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>m_Num1 <span class="token operator">&lt;&lt;</span> <span class="token string">" - "</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>m_Num2 <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>m_Num1 <span class="token operator">&lt;&lt;</span> <span class="token string">" * "</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>m_Num2 <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//多态实现</span><span class="token comment">//抽象计算器类</span><span class="token comment">//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护</span><span class="token keyword">class</span> <span class="token class-name">AbstractCalculator</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> m_Num1<span class="token punctuation">;</span><span class="token keyword">int</span> m_Num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//加法计算器</span><span class="token keyword">class</span> <span class="token class-name">AddCalculator</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">AbstractCalculator</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> m_Num1 <span class="token operator">+</span> m_Num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//减法计算器</span><span class="token keyword">class</span> <span class="token class-name">SubCalculator</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">AbstractCalculator</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> m_Num1 <span class="token operator">-</span> m_Num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//乘法计算器</span><span class="token keyword">class</span> <span class="token class-name">MulCalculator</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">AbstractCalculator</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> m_Num1 <span class="token operator">*</span> m_Num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//创建加法计算器</span>AbstractCalculator <span class="token operator">*</span>abc <span class="token operator">=</span> <span class="token keyword">new</span> AddCalculator<span class="token punctuation">;</span>abc<span class="token operator">-></span>m_Num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>abc<span class="token operator">-></span>m_Num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-></span>m_Num1 <span class="token operator">&lt;&lt;</span> <span class="token string">" + "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-></span>m_Num2 <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-></span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">delete</span> abc<span class="token punctuation">;</span>  <span class="token comment">//用完了记得销毁</span><span class="token comment">//创建减法计算器</span>abc <span class="token operator">=</span> <span class="token keyword">new</span> SubCalculator<span class="token punctuation">;</span>abc<span class="token operator">-></span>m_Num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>abc<span class="token operator">-></span>m_Num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-></span>m_Num1 <span class="token operator">&lt;&lt;</span> <span class="token string">" - "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-></span>m_Num2 <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-></span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">delete</span> abc<span class="token punctuation">;</span>  <span class="token comment">//创建乘法计算器</span>abc <span class="token operator">=</span> <span class="token keyword">new</span> MulCalculator<span class="token punctuation">;</span>abc<span class="token operator">-></span>m_Num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>abc<span class="token operator">-></span>m_Num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-></span>m_Num1 <span class="token operator">&lt;&lt;</span> <span class="token string">" * "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-></span>m_Num2 <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-></span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">delete</span> abc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//test01();</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-7-3-纯虚函数和抽象类"><a href="#4-7-3-纯虚函数和抽象类" class="headerlink" title="4.7.3 纯虚函数和抽象类"></a>4.7.3 纯虚函数和抽象类</h4><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p><p>因此可以将虚函数改为纯虚函数</p><p>纯虚函数语法：virtual 返回值类型 函数名 （参数列表）= 0 ;</p><p>当类中有了纯虚函数，这个类也称为抽象类</p><p><strong>抽象类特点</strong></p><ol><li><p>无法实例化对象</p></li><li><p>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</p><p><code>示例</code>：</p></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//纯虚函数</span><span class="token comment">//类中只要有一个纯虚函数就称为抽象类</span><span class="token comment">//抽象类无法实例化对象</span><span class="token comment">//子类必须重写父类中的纯虚函数，否则也属于抽象类</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Base <span class="token operator">*</span> base <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//base = new Base; // 错误，抽象类无法实例化对象</span>base <span class="token operator">=</span> <span class="token keyword">new</span> Son<span class="token punctuation">;</span>base<span class="token operator">-></span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> base<span class="token punctuation">;</span><span class="token comment">//记得销毁</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-7-4-多态案例二-制作饮品"><a href="#4-7-4-多态案例二-制作饮品" class="headerlink" title="4.7.4 多态案例二-制作饮品"></a>4.7.4 多态案例二-制作饮品</h4><p><strong>案例描述：</strong></p><p>制作饮品的大致流程为：煮水 - 冲泡 - 倒入杯中 - 加入辅料</p><p><code>示例</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//抽象制作饮品</span><span class="token keyword">class</span> <span class="token class-name">AbstractDrinking</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//烧水</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Boil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//冲泡</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//倒入杯中</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//加入辅料</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//规定流程</span><span class="token keyword">void</span> <span class="token function">MakeDrink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">Boil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">PourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//制作咖啡</span><span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">AbstractDrinking</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//烧水</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Boil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"煮农夫山泉!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//冲泡</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"冲泡咖啡!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//倒入杯中</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"将咖啡倒入杯中!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//加入辅料</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"加入牛奶!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//制作茶水</span><span class="token keyword">class</span> <span class="token class-name">Tea</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">AbstractDrinking</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//烧水</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Boil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"煮自来水!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//冲泡</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"冲泡茶叶!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//倒入杯中</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"将茶水倒入杯中!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//加入辅料</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"加入枸杞!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//业务函数</span><span class="token keyword">void</span> <span class="token function">DoWork</span><span class="token punctuation">(</span>AbstractDrinking<span class="token operator">*</span> drink<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>drink<span class="token operator">-></span><span class="token function">MakeDrink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> drink<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">DoWork</span><span class="token punctuation">(</span><span class="token keyword">new</span> Coffee<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"--------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">DoWork</span><span class="token punctuation">(</span><span class="token keyword">new</span> Tea<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-7-5-虚析构和纯虚析构"><a href="#4-7-5-虚析构和纯虚析构" class="headerlink" title="4.7.5 虚析构和纯虚析构"></a>4.7.5 虚析构和纯虚析构</h4><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p><p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p><p>虚析构和纯虚析构共性：</p><ol><li>可以解决父类指针释放子类对象</li><li>都需要有具体的函数实现</li></ol><p>虚析构和纯虚析构区别：</p><p>如果是纯虚析构，该对象是与抽象类，无法实例化对象</p><p>虚析构语法：</p><p>virtual ~类名（）{}</p><p>纯虚析构语法：</p><p>virtual ~类名（）=0；</p><p>类名：：~类名（）{}</p><p><code>示例</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token operator">:</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Animal 构造函数调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//析构函数加上virtual关键字，变成虚析构函数</span><span class="token comment">//virtual ~Animal()</span><span class="token comment">//&#123;</span><span class="token comment">//cout&lt;&lt;"Animal虚析构函数调用"&lt;&lt;endl;</span><span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Animal</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Animal 纯虚析构函数调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能被实例化</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>string<span class="token operator">*</span> m_Name<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Cat</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Cat构造函数调用!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>m_Name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">string</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">"小猫在说话"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Cat析构函数调用!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>m_Name <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">delete</span> m_Name<span class="token punctuation">;</span>m_Name <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Animal<span class="token operator">*</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animal<span class="token operator">-></span><span class="token function">Speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏</span><span class="token comment">//给基类增加一个虚析构函数</span><span class="token comment">//虚析构函数是用来解决通过父类指针释放子类对象</span><span class="token keyword">delete</span> animal<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ol><li>虚析构或纯虚析构就是+用来解决通过父类指针释放子类对象</li><li>如果子类中没有堆区数据，可以不写虚析构或纯虚析构</li><li>拥有纯虚析构函数的类也属于抽象类</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/10/17/3-han-shu-ti-gao/"/>
      <url>/2021/10/17/3-han-shu-ti-gao/</url>
      
        <content type="html"><![CDATA[<h2 id="3-函数提高"><a href="#3-函数提高" class="headerlink" title="3  函数提高"></a>3  函数提高</h2><h3 id="3-1-函数默认参数"><a href="#3-1-函数默认参数" class="headerlink" title="3.1 函数默认参数"></a>3.1 函数默认参数</h3><p>在cpp中，函数的形参列表中的形参可以有默认值</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token operator">+</span>d<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</span><span class="token comment">//如果函数声明有默认值，函数实现的时候就不能有默认参数</span><span class="token keyword">int</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"eqwwq"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//有就用实参，没有就用形参</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//cout &lt;&lt; func() &lt;&lt; endl;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-函数占位参数"><a href="#3-2-函数占位参数" class="headerlink" title="3.2 函数占位参数"></a>3.2 函数占位参数</h3><p>cpp中函数的形参列表可以有展位参数，用来做占位，调用函数时必须补齐该位置</p><p><code>示例</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"this is func"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//占位参数必须补齐</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3函数重载"><a href="#3-3函数重载" class="headerlink" title="3.3函数重载"></a>3.3函数重载</h3><h4 id="3-3-1-函数重载概述"><a href="#3-3-1-函数重载概述" class="headerlink" title="3.3.1 函数重载概述"></a>3.3.1 函数重载概述</h4><p><strong>作用</strong>：函数名可以相同，提高复用性</p><p><strong>函数重载满足条件</strong></p><ol><li>同一个作用域下</li><li>函数名称相同</li><li>函数参数<strong>类型不同</strong>或者<strong>个数不同</strong>或者<strong>顺序不同</strong></li></ol><p><strong>注意：</strong></p><p>函数的返回值不可以作为函数重载的条件</p><p><code>示例</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func(int a)的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func(double a)的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span>  a<span class="token punctuation">,</span><span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func(int a,double b)的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func(double a,int b)的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//函数返回值不可以作为函数重载的条件</span><span class="token comment">//int func(double a, int b)</span><span class="token comment">//&#123;</span><span class="token comment">//cout &lt;&lt; "func(double a,int b)的调用" &lt;&lt; endl;</span><span class="token comment">//&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-2函数重载注意事项"><a href="#3-3-2函数重载注意事项" class="headerlink" title="3.3.2函数重载注意事项"></a>3.3.2函数重载注意事项</h4><ol><li>引用作为重载条件</li><li>函数重载碰到函数默认参数</li></ol><p><code>示例</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//函数重载注意事项</span><span class="token comment">// 引用作为重载条件</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func(int &amp;a)的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func(const int &amp;a)的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//函数重载碰到函数默认参数</span><span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func2(int a, int b = 10)的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func2(int a)的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用无const </span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用const </span><span class="token comment">//func2(10);//出现歧义</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/10/17/2-yin-yong/"/>
      <url>/2021/10/17/2-yin-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="2-引用"><a href="#2-引用" class="headerlink" title="2. 引用"></a>2. 引用</h2><h3 id="2-1-引用的基本使用"><a href="#2-1-引用的基本使用" class="headerlink" title="2.1 引用的基本使用"></a>2.1 引用的基本使用</h3><p><strong>作用：</strong>给变量起别名</p><p><code>示例</code>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a= "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b = "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b = "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-引用注意事项"><a href="#2-2-引用注意事项" class="headerlink" title="2.2 引用注意事项"></a>2.2 引用注意事项</h3><ol><li>引用必须初始化</li><li>引用在初始化后，不可以改变</li></ol><p><code>示例</code>:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment">//引用必须初始化，且不能改变了</span>c <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token comment">//这是赋值操作</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b = "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"c = "</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-引用做函数参数"><a href="#2-3-引用做函数参数" class="headerlink" title="2.3 引用做函数参数"></a>2.3 引用做函数参数</h3><p><strong>作用</strong>：函数传参时，可以利用引用技术让形参修饰实参</p><p><strong>优点</strong>：可以简化指针修改实参</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">mySwap01</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//值传递</span><span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">mySwap02</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//地址传递</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span><span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span><span class="token operator">*</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">mySwap03</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token function">mySwap01</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a:"</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">"b:"</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">mySwap02</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a:"</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">"b:"</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">mySwap03</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a:"</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">"b:"</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：引用参数传入和按地址传入效果是一样的，引用更加简单</p><h3 id="2-4引用做函数返回值"><a href="#2-4引用做函数返回值" class="headerlink" title="2.4引用做函数返回值"></a>2.4引用做函数返回值</h3><p>作用：引用时可以作为函数的返回值存在的</p><p>注意：<strong>不要返回局部变量引用</strong></p><p>用法：函数调用作为左值</p><p><code>示例</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//局部变量</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//返回静态变量引用</span><span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//静态变量，存放在全局区，全局区上的数据在程序结束时释放</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>res <span class="token operator">=</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//编译器会保留一次</span>cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//这里就不可以了</span><span class="token keyword">int</span><span class="token operator">&amp;</span> res2 <span class="token operator">=</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果函数做左值，那么必须返回引用</span>cout <span class="token operator">&lt;&lt;</span> res2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> res2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> res2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> res2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-引用的本质"><a href="#2-5-引用的本质" class="headerlink" title="2.5 引用的本质"></a>2.5 引用的本质</h3><p>本质:引用的本质在cpp内部实现是一个指针常量</p><p>讲解示例:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//发现是引用，转换为int*const ref =&amp;a;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> ref<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ref <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//ref是引用，转换为*ref=100</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//自动转换为 int *const ref=&amp;a;指针常量是指针指向不可修改，也说明为什么引用不可以修改</span><span class="token keyword">int</span><span class="token operator">&amp;</span> ref <span class="token operator">=</span> a<span class="token punctuation">;</span>ref <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> ref <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结论：cpp推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有指针操作编译器会帮我们做了</p><h3 id="2-6-常量引用"><a href="#2-6-常量引用" class="headerlink" title="2.6 常量引用"></a>2.6 常量引用</h3><p><strong>作用：</strong>常量引用主要来修饰形参，防止误操作</p><p>在函数形参列表中，可以加<strong>const 修饰形参</strong>，防止形参改变实参</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">showValue</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//v += 10;报错，</span>cout <span class="token operator">&lt;&lt;</span> v <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//int&amp; ref = 10;引用本身需要一个和法的空间，因此错误</span><span class="token comment">//加入const 就可以了，编译器优化代码，int temp=10,const int &amp;ref=temp</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> ref <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//ref = 100;//加入const 后可以不修改变量</span>cout <span class="token operator">&lt;&lt;</span> ref <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">showValue</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/10/17/1-nei-cun-fen-qu-mo-xing/"/>
      <url>/2021/10/17/1-nei-cun-fen-qu-mo-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="1-内存分区模型"><a href="#1-内存分区模型" class="headerlink" title="1.  内存分区模型"></a>1.  内存分区模型</h2><p>cpp程序在执行时，将内存大方向划分为<strong>4个区域</strong></p><ol><li>代码区：存放函数体的二进制代码，由操作系统进行管理</li><li>全局区：存放全局变量和静态变量以及常量</li><li>栈区：有编译器自动分配释放，存放函数的参数值，局部变量等等</li><li>堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收</li></ol><p><strong>内存四区的意义：</strong></p><p>不同区域存放的数据，赋予不同的声明周期，给我们更大的灵活编程</p><h3 id="1-1程序运行前"><a href="#1-1程序运行前" class="headerlink" title="1.1程序运行前"></a>1.1程序运行前</h3><p>在程序编译后，生成了exe可执行程序，<strong>为执行该程序前</strong>分为两个区域</p><p><strong>代码区</strong>：</p><p>存放CUP执行的机器指令</p><p>代码是<strong>共享</strong>的，共享的目的时对于频繁被执行的程序，只需要再内存中有一份代码即可</p><p>代码是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了他的指令</p><p><strong>全局区：</strong></p><p>全局变量和静态变量存放于此</p><p>全局区还包含了常数区，字符串常量和其他常量也存放于此</p><p><strong>该区域的数据再程序结束后由操作系统释放</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//全局变量</span><span class="token keyword">int</span> g_a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> g_b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//全局常量</span><span class="token keyword">const</span> <span class="token keyword">int</span> c_g_a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> c_g_b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//局部变量</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//打印地址</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"局部变量a地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"局部变量b地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"全局变量g_a地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"全局变量g_b地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g_b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//静态变量</span><span class="token keyword">static</span> <span class="token keyword">int</span> s_a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> s_b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"静态变量s_a地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"静态变量s_b地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s_b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"字符串常量地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token string">"hello world"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"字符串常量地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token string">"hello world1"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"全局常量c_g_a地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c_g_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"全局常量c_g_b地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c_g_b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> c_l_a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> c_l_b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"局部常量c_l_a地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c_l_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"局部常量c_l_b地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c_l_b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结;</p><ol><li>cpp中在程序运行前分为全局区和代码区</li><li>代码区的特点是只读和共享</li><li>全局区中存放全局变量，静态变量，常量</li><li>常量区中放const 修饰的全局常量和字符串常量</li></ol><h4 id="1-2-程序运行后"><a href="#1-2-程序运行后" class="headerlink" title="1.2 程序运行后"></a>1.2 程序运行后</h4><p><strong>栈区</strong>：</p><p>由编译器自动分配释放，存放函数的参数值，局部变量等</p><p>注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//int*对应的是返回的int 地址</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//局部变量存放在栈上，执行完后自动释放</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment">//返回局部变量地址</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//接受func函数的返回值</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//第一次可以打印是因为编译器做了保留</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>堆区</strong>;</p><p>由程序员分配释放，若程序员不释放，程序结束时由操作系统回收</p><p>在 cpp中主要利用new在队中开辟内存</p><p><code>示例</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token operator">*</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><p>堆区数据由程序员管理开辟和释放</p><p>堆区数据利用new关键字进行开辟内存</p><h4 id="1-3-new操作符"><a href="#1-3-new操作符" class="headerlink" title="1.3 new操作符"></a>1.3 new操作符</h4><p>cpp中利用<strong>new</strong>操作符在对去开辟数据</p><p>堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符<strong>delete</strong></p><p>利用new创建的数据，会返回数据对应的类型指针</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token operator">*</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回指针</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//释放</span><span class="token keyword">delete</span> p<span class="token punctuation">;</span><span class="token comment">//cout &lt;&lt; *p &lt;&lt; endl;报错</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token operator">*</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
